/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 353.0, "minX": 0.0, "maxY": 47372.0, "series": [{"data": [[0.0, 353.0], [0.1, 354.0], [0.2, 355.0], [0.3, 356.0], [0.4, 356.0], [0.5, 356.0], [0.6, 356.0], [0.7, 356.0], [0.8, 356.0], [0.9, 356.0], [1.0, 357.0], [1.1, 357.0], [1.2, 357.0], [1.3, 357.0], [1.4, 357.0], [1.5, 357.0], [1.6, 357.0], [1.7, 357.0], [1.8, 357.0], [1.9, 358.0], [2.0, 358.0], [2.1, 358.0], [2.2, 358.0], [2.3, 358.0], [2.4, 358.0], [2.5, 358.0], [2.6, 358.0], [2.7, 358.0], [2.8, 358.0], [2.9, 358.0], [3.0, 358.0], [3.1, 358.0], [3.2, 358.0], [3.3, 358.0], [3.4, 358.0], [3.5, 358.0], [3.6, 359.0], [3.7, 359.0], [3.8, 359.0], [3.9, 359.0], [4.0, 359.0], [4.1, 359.0], [4.2, 359.0], [4.3, 359.0], [4.4, 359.0], [4.5, 359.0], [4.6, 359.0], [4.7, 359.0], [4.8, 359.0], [4.9, 359.0], [5.0, 359.0], [5.1, 359.0], [5.2, 359.0], [5.3, 360.0], [5.4, 360.0], [5.5, 360.0], [5.6, 360.0], [5.7, 360.0], [5.8, 360.0], [5.9, 360.0], [6.0, 360.0], [6.1, 360.0], [6.2, 360.0], [6.3, 360.0], [6.4, 360.0], [6.5, 360.0], [6.6, 360.0], [6.7, 361.0], [6.8, 361.0], [6.9, 361.0], [7.0, 361.0], [7.1, 361.0], [7.2, 361.0], [7.3, 361.0], [7.4, 361.0], [7.5, 361.0], [7.6, 361.0], [7.7, 361.0], [7.8, 361.0], [7.9, 361.0], [8.0, 361.0], [8.1, 361.0], [8.2, 361.0], [8.3, 361.0], [8.4, 361.0], [8.5, 361.0], [8.6, 361.0], [8.7, 361.0], [8.8, 361.0], [8.9, 361.0], [9.0, 361.0], [9.1, 361.0], [9.2, 362.0], [9.3, 362.0], [9.4, 362.0], [9.5, 362.0], [9.6, 362.0], [9.7, 362.0], [9.8, 362.0], [9.9, 362.0], [10.0, 362.0], [10.1, 362.0], [10.2, 362.0], [10.3, 362.0], [10.4, 362.0], [10.5, 362.0], [10.6, 362.0], [10.7, 362.0], [10.8, 362.0], [10.9, 362.0], [11.0, 362.0], [11.1, 362.0], [11.2, 362.0], [11.3, 362.0], [11.4, 362.0], [11.5, 362.0], [11.6, 362.0], [11.7, 362.0], [11.8, 363.0], [11.9, 363.0], [12.0, 363.0], [12.1, 363.0], [12.2, 363.0], [12.3, 363.0], [12.4, 363.0], [12.5, 363.0], [12.6, 363.0], [12.7, 363.0], [12.8, 363.0], [12.9, 363.0], [13.0, 363.0], [13.1, 363.0], [13.2, 363.0], [13.3, 363.0], [13.4, 363.0], [13.5, 363.0], [13.6, 363.0], [13.7, 363.0], [13.8, 363.0], [13.9, 363.0], [14.0, 363.0], [14.1, 363.0], [14.2, 363.0], [14.3, 364.0], [14.4, 364.0], [14.5, 364.0], [14.6, 364.0], [14.7, 364.0], [14.8, 364.0], [14.9, 364.0], [15.0, 364.0], [15.1, 364.0], [15.2, 364.0], [15.3, 364.0], [15.4, 364.0], [15.5, 364.0], [15.6, 364.0], [15.7, 364.0], [15.8, 364.0], [15.9, 364.0], [16.0, 364.0], [16.1, 364.0], [16.2, 364.0], [16.3, 364.0], [16.4, 364.0], [16.5, 364.0], [16.6, 364.0], [16.7, 364.0], [16.8, 365.0], [16.9, 365.0], [17.0, 365.0], [17.1, 365.0], [17.2, 365.0], [17.3, 365.0], [17.4, 365.0], [17.5, 365.0], [17.6, 365.0], [17.7, 365.0], [17.8, 365.0], [17.9, 365.0], [18.0, 365.0], [18.1, 365.0], [18.2, 365.0], [18.3, 365.0], [18.4, 365.0], [18.5, 365.0], [18.6, 365.0], [18.7, 365.0], [18.8, 365.0], [18.9, 365.0], [19.0, 365.0], [19.1, 365.0], [19.2, 365.0], [19.3, 365.0], [19.4, 365.0], [19.5, 365.0], [19.6, 365.0], [19.7, 365.0], [19.8, 365.0], [19.9, 366.0], [20.0, 366.0], [20.1, 366.0], [20.2, 366.0], [20.3, 366.0], [20.4, 366.0], [20.5, 366.0], [20.6, 366.0], [20.7, 366.0], [20.8, 366.0], [20.9, 366.0], [21.0, 366.0], [21.1, 366.0], [21.2, 366.0], [21.3, 366.0], [21.4, 366.0], [21.5, 366.0], [21.6, 366.0], [21.7, 366.0], [21.8, 366.0], [21.9, 366.0], [22.0, 366.0], [22.1, 366.0], [22.2, 366.0], [22.3, 366.0], [22.4, 366.0], [22.5, 366.0], [22.6, 366.0], [22.7, 366.0], [22.8, 366.0], [22.9, 366.0], [23.0, 366.0], [23.1, 366.0], [23.2, 366.0], [23.3, 367.0], [23.4, 367.0], [23.5, 367.0], [23.6, 367.0], [23.7, 367.0], [23.8, 367.0], [23.9, 367.0], [24.0, 367.0], [24.1, 367.0], [24.2, 367.0], [24.3, 367.0], [24.4, 367.0], [24.5, 367.0], [24.6, 367.0], [24.7, 367.0], [24.8, 367.0], [24.9, 367.0], [25.0, 367.0], [25.1, 367.0], [25.2, 367.0], [25.3, 367.0], [25.4, 367.0], [25.5, 367.0], [25.6, 367.0], [25.7, 367.0], [25.8, 367.0], [25.9, 367.0], [26.0, 367.0], [26.1, 367.0], [26.2, 367.0], [26.3, 367.0], [26.4, 367.0], [26.5, 367.0], [26.6, 367.0], [26.7, 367.0], [26.8, 367.0], [26.9, 367.0], [27.0, 367.0], [27.1, 368.0], [27.2, 368.0], [27.3, 368.0], [27.4, 368.0], [27.5, 368.0], [27.6, 368.0], [27.7, 368.0], [27.8, 368.0], [27.9, 368.0], [28.0, 368.0], [28.1, 368.0], [28.2, 368.0], [28.3, 368.0], [28.4, 368.0], [28.5, 368.0], [28.6, 368.0], [28.7, 368.0], [28.8, 368.0], [28.9, 368.0], [29.0, 368.0], [29.1, 368.0], [29.2, 368.0], [29.3, 368.0], [29.4, 368.0], [29.5, 368.0], [29.6, 368.0], [29.7, 368.0], [29.8, 368.0], [29.9, 368.0], [30.0, 368.0], [30.1, 368.0], [30.2, 368.0], [30.3, 368.0], [30.4, 368.0], [30.5, 368.0], [30.6, 368.0], [30.7, 368.0], [30.8, 368.0], [30.9, 368.0], [31.0, 368.0], [31.1, 368.0], [31.2, 368.0], [31.3, 369.0], [31.4, 369.0], [31.5, 369.0], [31.6, 369.0], [31.7, 369.0], [31.8, 369.0], [31.9, 369.0], [32.0, 369.0], [32.1, 369.0], [32.2, 369.0], [32.3, 369.0], [32.4, 369.0], [32.5, 369.0], [32.6, 369.0], [32.7, 369.0], [32.8, 369.0], [32.9, 369.0], [33.0, 369.0], [33.1, 369.0], [33.2, 369.0], [33.3, 369.0], [33.4, 369.0], [33.5, 369.0], [33.6, 369.0], [33.7, 369.0], [33.8, 369.0], [33.9, 369.0], [34.0, 369.0], [34.1, 369.0], [34.2, 369.0], [34.3, 369.0], [34.4, 369.0], [34.5, 369.0], [34.6, 369.0], [34.7, 369.0], [34.8, 369.0], [34.9, 369.0], [35.0, 369.0], [35.1, 369.0], [35.2, 369.0], [35.3, 369.0], [35.4, 369.0], [35.5, 370.0], [35.6, 370.0], [35.7, 370.0], [35.8, 370.0], [35.9, 370.0], [36.0, 370.0], [36.1, 370.0], [36.2, 370.0], [36.3, 370.0], [36.4, 370.0], [36.5, 370.0], [36.6, 370.0], [36.7, 370.0], [36.8, 370.0], [36.9, 370.0], [37.0, 370.0], [37.1, 370.0], [37.2, 370.0], [37.3, 370.0], [37.4, 370.0], [37.5, 370.0], [37.6, 370.0], [37.7, 370.0], [37.8, 370.0], [37.9, 370.0], [38.0, 370.0], [38.1, 370.0], [38.2, 370.0], [38.3, 370.0], [38.4, 370.0], [38.5, 370.0], [38.6, 370.0], [38.7, 370.0], [38.8, 370.0], [38.9, 370.0], [39.0, 370.0], [39.1, 370.0], [39.2, 370.0], [39.3, 370.0], [39.4, 370.0], [39.5, 370.0], [39.6, 370.0], [39.7, 370.0], [39.8, 370.0], [39.9, 370.0], [40.0, 370.0], [40.1, 370.0], [40.2, 370.0], [40.3, 371.0], [40.4, 371.0], [40.5, 371.0], [40.6, 371.0], [40.7, 371.0], [40.8, 371.0], [40.9, 371.0], [41.0, 371.0], [41.1, 371.0], [41.2, 371.0], [41.3, 371.0], [41.4, 371.0], [41.5, 371.0], [41.6, 371.0], [41.7, 371.0], [41.8, 371.0], [41.9, 371.0], [42.0, 371.0], [42.1, 371.0], [42.2, 371.0], [42.3, 371.0], [42.4, 371.0], [42.5, 371.0], [42.6, 371.0], [42.7, 371.0], [42.8, 371.0], [42.9, 371.0], [43.0, 371.0], [43.1, 371.0], [43.2, 371.0], [43.3, 371.0], [43.4, 371.0], [43.5, 371.0], [43.6, 371.0], [43.7, 371.0], [43.8, 371.0], [43.9, 371.0], [44.0, 371.0], [44.1, 371.0], [44.2, 371.0], [44.3, 371.0], [44.4, 371.0], [44.5, 371.0], [44.6, 371.0], [44.7, 372.0], [44.8, 372.0], [44.9, 372.0], [45.0, 372.0], [45.1, 372.0], [45.2, 372.0], [45.3, 372.0], [45.4, 372.0], [45.5, 372.0], [45.6, 372.0], [45.7, 372.0], [45.8, 372.0], [45.9, 372.0], [46.0, 372.0], [46.1, 372.0], [46.2, 372.0], [46.3, 372.0], [46.4, 372.0], [46.5, 372.0], [46.6, 372.0], [46.7, 372.0], [46.8, 372.0], [46.9, 372.0], [47.0, 372.0], [47.1, 372.0], [47.2, 372.0], [47.3, 372.0], [47.4, 372.0], [47.5, 372.0], [47.6, 372.0], [47.7, 372.0], [47.8, 372.0], [47.9, 372.0], [48.0, 372.0], [48.1, 372.0], [48.2, 372.0], [48.3, 372.0], [48.4, 372.0], [48.5, 372.0], [48.6, 372.0], [48.7, 372.0], [48.8, 372.0], [48.9, 372.0], [49.0, 372.0], [49.1, 372.0], [49.2, 372.0], [49.3, 372.0], [49.4, 372.0], [49.5, 372.0], [49.6, 372.0], [49.7, 372.0], [49.8, 372.0], [49.9, 372.0], [50.0, 372.0], [50.1, 372.0], [50.2, 372.0], [50.3, 373.0], [50.4, 373.0], [50.5, 373.0], [50.6, 373.0], [50.7, 373.0], [50.8, 373.0], [50.9, 373.0], [51.0, 373.0], [51.1, 373.0], [51.2, 373.0], [51.3, 373.0], [51.4, 373.0], [51.5, 373.0], [51.6, 373.0], [51.7, 373.0], [51.8, 373.0], [51.9, 373.0], [52.0, 373.0], [52.1, 373.0], [52.2, 373.0], [52.3, 373.0], [52.4, 373.0], [52.5, 373.0], [52.6, 373.0], [52.7, 373.0], [52.8, 373.0], [52.9, 373.0], [53.0, 373.0], [53.1, 373.0], [53.2, 373.0], [53.3, 373.0], [53.4, 373.0], [53.5, 373.0], [53.6, 373.0], [53.7, 373.0], [53.8, 373.0], [53.9, 373.0], [54.0, 373.0], [54.1, 373.0], [54.2, 373.0], [54.3, 373.0], [54.4, 373.0], [54.5, 373.0], [54.6, 373.0], [54.7, 373.0], [54.8, 373.0], [54.9, 373.0], [55.0, 373.0], [55.1, 373.0], [55.2, 373.0], [55.3, 374.0], [55.4, 374.0], [55.5, 374.0], [55.6, 374.0], [55.7, 374.0], [55.8, 374.0], [55.9, 374.0], [56.0, 374.0], [56.1, 374.0], [56.2, 374.0], [56.3, 374.0], [56.4, 374.0], [56.5, 374.0], [56.6, 374.0], [56.7, 374.0], [56.8, 374.0], [56.9, 374.0], [57.0, 374.0], [57.1, 374.0], [57.2, 374.0], [57.3, 374.0], [57.4, 374.0], [57.5, 374.0], [57.6, 374.0], [57.7, 374.0], [57.8, 374.0], [57.9, 374.0], [58.0, 374.0], [58.1, 374.0], [58.2, 374.0], [58.3, 374.0], [58.4, 374.0], [58.5, 374.0], [58.6, 374.0], [58.7, 374.0], [58.8, 374.0], [58.9, 374.0], [59.0, 374.0], [59.1, 374.0], [59.2, 374.0], [59.3, 374.0], [59.4, 374.0], [59.5, 375.0], [59.6, 375.0], [59.7, 375.0], [59.8, 375.0], [59.9, 375.0], [60.0, 375.0], [60.1, 375.0], [60.2, 375.0], [60.3, 375.0], [60.4, 375.0], [60.5, 375.0], [60.6, 375.0], [60.7, 375.0], [60.8, 375.0], [60.9, 375.0], [61.0, 375.0], [61.1, 375.0], [61.2, 375.0], [61.3, 375.0], [61.4, 375.0], [61.5, 375.0], [61.6, 375.0], [61.7, 375.0], [61.8, 375.0], [61.9, 375.0], [62.0, 375.0], [62.1, 375.0], [62.2, 375.0], [62.3, 375.0], [62.4, 375.0], [62.5, 375.0], [62.6, 375.0], [62.7, 375.0], [62.8, 375.0], [62.9, 375.0], [63.0, 375.0], [63.1, 375.0], [63.2, 375.0], [63.3, 375.0], [63.4, 376.0], [63.5, 376.0], [63.6, 376.0], [63.7, 376.0], [63.8, 376.0], [63.9, 376.0], [64.0, 376.0], [64.1, 376.0], [64.2, 376.0], [64.3, 376.0], [64.4, 376.0], [64.5, 376.0], [64.6, 376.0], [64.7, 376.0], [64.8, 376.0], [64.9, 376.0], [65.0, 376.0], [65.1, 376.0], [65.2, 376.0], [65.3, 376.0], [65.4, 376.0], [65.5, 376.0], [65.6, 376.0], [65.7, 376.0], [65.8, 376.0], [65.9, 376.0], [66.0, 376.0], [66.1, 376.0], [66.2, 376.0], [66.3, 376.0], [66.4, 376.0], [66.5, 376.0], [66.6, 376.0], [66.7, 376.0], [66.8, 376.0], [66.9, 376.0], [67.0, 376.0], [67.1, 376.0], [67.2, 376.0], [67.3, 377.0], [67.4, 377.0], [67.5, 377.0], [67.6, 377.0], [67.7, 377.0], [67.8, 377.0], [67.9, 377.0], [68.0, 377.0], [68.1, 377.0], [68.2, 377.0], [68.3, 377.0], [68.4, 377.0], [68.5, 377.0], [68.6, 377.0], [68.7, 377.0], [68.8, 377.0], [68.9, 377.0], [69.0, 377.0], [69.1, 377.0], [69.2, 377.0], [69.3, 377.0], [69.4, 377.0], [69.5, 377.0], [69.6, 377.0], [69.7, 377.0], [69.8, 377.0], [69.9, 377.0], [70.0, 377.0], [70.1, 377.0], [70.2, 377.0], [70.3, 377.0], [70.4, 378.0], [70.5, 378.0], [70.6, 378.0], [70.7, 378.0], [70.8, 378.0], [70.9, 378.0], [71.0, 378.0], [71.1, 378.0], [71.2, 378.0], [71.3, 378.0], [71.4, 378.0], [71.5, 378.0], [71.6, 378.0], [71.7, 378.0], [71.8, 378.0], [71.9, 378.0], [72.0, 378.0], [72.1, 378.0], [72.2, 378.0], [72.3, 378.0], [72.4, 378.0], [72.5, 378.0], [72.6, 378.0], [72.7, 378.0], [72.8, 378.0], [72.9, 378.0], [73.0, 379.0], [73.1, 379.0], [73.2, 379.0], [73.3, 379.0], [73.4, 379.0], [73.5, 379.0], [73.6, 379.0], [73.7, 379.0], [73.8, 379.0], [73.9, 379.0], [74.0, 379.0], [74.1, 379.0], [74.2, 379.0], [74.3, 379.0], [74.4, 379.0], [74.5, 379.0], [74.6, 379.0], [74.7, 379.0], [74.8, 379.0], [74.9, 379.0], [75.0, 379.0], [75.1, 379.0], [75.2, 379.0], [75.3, 379.0], [75.4, 379.0], [75.5, 380.0], [75.6, 380.0], [75.7, 380.0], [75.8, 380.0], [75.9, 380.0], [76.0, 380.0], [76.1, 380.0], [76.2, 380.0], [76.3, 380.0], [76.4, 380.0], [76.5, 380.0], [76.6, 380.0], [76.7, 380.0], [76.8, 380.0], [76.9, 380.0], [77.0, 380.0], [77.1, 380.0], [77.2, 380.0], [77.3, 380.0], [77.4, 380.0], [77.5, 380.0], [77.6, 380.0], [77.7, 380.0], [77.8, 380.0], [77.9, 380.0], [78.0, 380.0], [78.1, 381.0], [78.2, 381.0], [78.3, 381.0], [78.4, 381.0], [78.5, 381.0], [78.6, 381.0], [78.7, 381.0], [78.8, 381.0], [78.9, 381.0], [79.0, 381.0], [79.1, 381.0], [79.2, 381.0], [79.3, 381.0], [79.4, 381.0], [79.5, 381.0], [79.6, 382.0], [79.7, 382.0], [79.8, 382.0], [79.9, 382.0], [80.0, 382.0], [80.1, 382.0], [80.2, 382.0], [80.3, 382.0], [80.4, 382.0], [80.5, 382.0], [80.6, 382.0], [80.7, 382.0], [80.8, 382.0], [80.9, 382.0], [81.0, 382.0], [81.1, 382.0], [81.2, 382.0], [81.3, 382.0], [81.4, 382.0], [81.5, 382.0], [81.6, 383.0], [81.7, 383.0], [81.8, 383.0], [81.9, 383.0], [82.0, 383.0], [82.1, 383.0], [82.2, 383.0], [82.3, 383.0], [82.4, 383.0], [82.5, 383.0], [82.6, 384.0], [82.7, 384.0], [82.8, 384.0], [82.9, 384.0], [83.0, 384.0], [83.1, 384.0], [83.2, 384.0], [83.3, 384.0], [83.4, 384.0], [83.5, 384.0], [83.6, 384.0], [83.7, 384.0], [83.8, 385.0], [83.9, 385.0], [84.0, 385.0], [84.1, 385.0], [84.2, 385.0], [84.3, 385.0], [84.4, 385.0], [84.5, 385.0], [84.6, 386.0], [84.7, 386.0], [84.8, 386.0], [84.9, 386.0], [85.0, 386.0], [85.1, 386.0], [85.2, 386.0], [85.3, 386.0], [85.4, 387.0], [85.5, 387.0], [85.6, 387.0], [85.7, 387.0], [85.8, 387.0], [85.9, 387.0], [86.0, 388.0], [86.1, 388.0], [86.2, 388.0], [86.3, 388.0], [86.4, 388.0], [86.5, 388.0], [86.6, 389.0], [86.7, 389.0], [86.8, 389.0], [86.9, 390.0], [87.0, 390.0], [87.1, 391.0], [87.2, 391.0], [87.3, 391.0], [87.4, 392.0], [87.5, 392.0], [87.6, 392.0], [87.7, 392.0], [87.8, 393.0], [87.9, 393.0], [88.0, 393.0], [88.1, 393.0], [88.2, 393.0], [88.3, 394.0], [88.4, 394.0], [88.5, 395.0], [88.6, 395.0], [88.7, 395.0], [88.8, 396.0], [88.9, 396.0], [89.0, 397.0], [89.1, 398.0], [89.2, 399.0], [89.3, 400.0], [89.4, 400.0], [89.5, 402.0], [89.6, 403.0], [89.7, 403.0], [89.8, 404.0], [89.9, 405.0], [90.0, 406.0], [90.1, 409.0], [90.2, 411.0], [90.3, 411.0], [90.4, 414.0], [90.5, 423.0], [90.6, 425.0], [90.7, 432.0], [90.8, 433.0], [90.9, 436.0], [91.0, 441.0], [91.1, 444.0], [91.2, 452.0], [91.3, 458.0], [91.4, 472.0], [91.5, 478.0], [91.6, 479.0], [91.7, 480.0], [91.8, 481.0], [91.9, 483.0], [92.0, 484.0], [92.1, 485.0], [92.2, 485.0], [92.3, 486.0], [92.4, 486.0], [92.5, 489.0], [92.6, 489.0], [92.7, 490.0], [92.8, 491.0], [92.9, 491.0], [93.0, 492.0], [93.1, 492.0], [93.2, 493.0], [93.3, 494.0], [93.4, 494.0], [93.5, 495.0], [93.6, 495.0], [93.7, 497.0], [93.8, 498.0], [93.9, 499.0], [94.0, 502.0], [94.1, 503.0], [94.2, 505.0], [94.3, 507.0], [94.4, 510.0], [94.5, 512.0], [94.6, 546.0], [94.7, 549.0], [94.8, 605.0], [94.9, 613.0], [95.0, 613.0], [95.1, 615.0], [95.2, 618.0], [95.3, 620.0], [95.4, 620.0], [95.5, 621.0], [95.6, 621.0], [95.7, 623.0], [95.8, 625.0], [95.9, 625.0], [96.0, 627.0], [96.1, 627.0], [96.2, 628.0], [96.3, 628.0], [96.4, 630.0], [96.5, 632.0], [96.6, 633.0], [96.7, 636.0], [96.8, 637.0], [96.9, 637.0], [97.0, 638.0], [97.1, 641.0], [97.2, 644.0], [97.3, 653.0], [97.4, 660.0], [97.5, 679.0], [97.6, 711.0], [97.7, 727.0], [97.8, 747.0], [97.9, 836.0], [98.0, 876.0], [98.1, 895.0], [98.2, 1000.0], [98.3, 1203.0], [98.4, 1503.0], [98.5, 1543.0], [98.6, 1551.0], [98.7, 1559.0], [98.8, 1575.0], [98.9, 1580.0], [99.0, 1594.0], [99.1, 1618.0], [99.2, 1629.0], [99.3, 1641.0], [99.4, 1802.0], [99.5, 2632.0], [99.6, 2649.0], [99.7, 2784.0], [99.8, 3628.0], [99.9, 5112.0]], "isOverall": false, "label": "Create Booking", "isController": false}, {"data": [[0.0, 1479.0], [0.1, 1488.0], [0.2, 1492.0], [0.3, 1498.0], [0.4, 1500.0], [0.5, 1502.0], [0.6, 1506.0], [0.7, 1512.0], [0.8, 1516.0], [0.9, 1518.0], [1.0, 1521.0], [1.1, 1524.0], [1.2, 1525.0], [1.3, 1527.0], [1.4, 1528.0], [1.5, 1531.0], [1.6, 1534.0], [1.7, 1534.0], [1.8, 1537.0], [1.9, 1539.0], [2.0, 1541.0], [2.1, 1544.0], [2.2, 1545.0], [2.3, 1547.0], [2.4, 1549.0], [2.5, 1552.0], [2.6, 1556.0], [2.7, 1557.0], [2.8, 1559.0], [2.9, 1560.0], [3.0, 1562.0], [3.1, 1565.0], [3.2, 1569.0], [3.3, 1570.0], [3.4, 1573.0], [3.5, 1578.0], [3.6, 1582.0], [3.7, 1584.0], [3.8, 1590.0], [3.9, 1592.0], [4.0, 1599.0], [4.1, 1600.0], [4.2, 1601.0], [4.3, 1604.0], [4.4, 1610.0], [4.5, 1612.0], [4.6, 1624.0], [4.7, 1627.0], [4.8, 1631.0], [4.9, 1633.0], [5.0, 1640.0], [5.1, 1643.0], [5.2, 1653.0], [5.3, 1656.0], [5.4, 1661.0], [5.5, 1670.0], [5.6, 1679.0], [5.7, 1682.0], [5.8, 1693.0], [5.9, 1712.0], [6.0, 1727.0], [6.1, 1764.0], [6.2, 1773.0], [6.3, 1777.0], [6.4, 1779.0], [6.5, 1780.0], [6.6, 1781.0], [6.7, 1783.0], [6.8, 1784.0], [6.9, 1784.0], [7.0, 1785.0], [7.1, 1786.0], [7.2, 1786.0], [7.3, 1788.0], [7.4, 1788.0], [7.5, 1788.0], [7.6, 1789.0], [7.7, 1789.0], [7.8, 1789.0], [7.9, 1790.0], [8.0, 1790.0], [8.1, 1791.0], [8.2, 1791.0], [8.3, 1792.0], [8.4, 1792.0], [8.5, 1793.0], [8.6, 1793.0], [8.7, 1794.0], [8.8, 1795.0], [8.9, 1795.0], [9.0, 1795.0], [9.1, 1795.0], [9.2, 1796.0], [9.3, 1796.0], [9.4, 1797.0], [9.5, 1797.0], [9.6, 1797.0], [9.7, 1798.0], [9.8, 1798.0], [9.9, 1798.0], [10.0, 1799.0], [10.1, 1799.0], [10.2, 1799.0], [10.3, 1800.0], [10.4, 1800.0], [10.5, 1800.0], [10.6, 1801.0], [10.7, 1801.0], [10.8, 1801.0], [10.9, 1802.0], [11.0, 1802.0], [11.1, 1803.0], [11.2, 1803.0], [11.3, 1803.0], [11.4, 1804.0], [11.5, 1804.0], [11.6, 1805.0], [11.7, 1805.0], [11.8, 1805.0], [11.9, 1805.0], [12.0, 1806.0], [12.1, 1806.0], [12.2, 1806.0], [12.3, 1806.0], [12.4, 1807.0], [12.5, 1807.0], [12.6, 1807.0], [12.7, 1808.0], [12.8, 1808.0], [12.9, 1808.0], [13.0, 1808.0], [13.1, 1809.0], [13.2, 1809.0], [13.3, 1809.0], [13.4, 1809.0], [13.5, 1810.0], [13.6, 1810.0], [13.7, 1810.0], [13.8, 1811.0], [13.9, 1811.0], [14.0, 1811.0], [14.1, 1811.0], [14.2, 1811.0], [14.3, 1812.0], [14.4, 1812.0], [14.5, 1812.0], [14.6, 1812.0], [14.7, 1813.0], [14.8, 1813.0], [14.9, 1813.0], [15.0, 1813.0], [15.1, 1813.0], [15.2, 1814.0], [15.3, 1814.0], [15.4, 1815.0], [15.5, 1815.0], [15.6, 1815.0], [15.7, 1815.0], [15.8, 1816.0], [15.9, 1816.0], [16.0, 1816.0], [16.1, 1817.0], [16.2, 1817.0], [16.3, 1818.0], [16.4, 1818.0], [16.5, 1818.0], [16.6, 1819.0], [16.7, 1819.0], [16.8, 1819.0], [16.9, 1820.0], [17.0, 1820.0], [17.1, 1820.0], [17.2, 1820.0], [17.3, 1821.0], [17.4, 1821.0], [17.5, 1821.0], [17.6, 1821.0], [17.7, 1821.0], [17.8, 1822.0], [17.9, 1822.0], [18.0, 1822.0], [18.1, 1822.0], [18.2, 1823.0], [18.3, 1823.0], [18.4, 1823.0], [18.5, 1824.0], [18.6, 1824.0], [18.7, 1824.0], [18.8, 1824.0], [18.9, 1824.0], [19.0, 1824.0], [19.1, 1825.0], [19.2, 1825.0], [19.3, 1825.0], [19.4, 1825.0], [19.5, 1825.0], [19.6, 1825.0], [19.7, 1826.0], [19.8, 1826.0], [19.9, 1826.0], [20.0, 1826.0], [20.1, 1826.0], [20.2, 1826.0], [20.3, 1827.0], [20.4, 1827.0], [20.5, 1827.0], [20.6, 1828.0], [20.7, 1828.0], [20.8, 1828.0], [20.9, 1828.0], [21.0, 1829.0], [21.1, 1829.0], [21.2, 1829.0], [21.3, 1829.0], [21.4, 1830.0], [21.5, 1830.0], [21.6, 1830.0], [21.7, 1830.0], [21.8, 1831.0], [21.9, 1831.0], [22.0, 1831.0], [22.1, 1831.0], [22.2, 1831.0], [22.3, 1831.0], [22.4, 1831.0], [22.5, 1832.0], [22.6, 1832.0], [22.7, 1832.0], [22.8, 1832.0], [22.9, 1833.0], [23.0, 1833.0], [23.1, 1833.0], [23.2, 1833.0], [23.3, 1833.0], [23.4, 1833.0], [23.5, 1833.0], [23.6, 1834.0], [23.7, 1834.0], [23.8, 1834.0], [23.9, 1834.0], [24.0, 1835.0], [24.1, 1835.0], [24.2, 1835.0], [24.3, 1835.0], [24.4, 1835.0], [24.5, 1835.0], [24.6, 1836.0], [24.7, 1836.0], [24.8, 1836.0], [24.9, 1836.0], [25.0, 1836.0], [25.1, 1836.0], [25.2, 1836.0], [25.3, 1837.0], [25.4, 1837.0], [25.5, 1837.0], [25.6, 1837.0], [25.7, 1837.0], [25.8, 1837.0], [25.9, 1837.0], [26.0, 1837.0], [26.1, 1838.0], [26.2, 1838.0], [26.3, 1838.0], [26.4, 1838.0], [26.5, 1838.0], [26.6, 1838.0], [26.7, 1839.0], [26.8, 1839.0], [26.9, 1839.0], [27.0, 1839.0], [27.1, 1839.0], [27.2, 1839.0], [27.3, 1840.0], [27.4, 1840.0], [27.5, 1840.0], [27.6, 1840.0], [27.7, 1840.0], [27.8, 1840.0], [27.9, 1841.0], [28.0, 1841.0], [28.1, 1841.0], [28.2, 1841.0], [28.3, 1841.0], [28.4, 1842.0], [28.5, 1842.0], [28.6, 1842.0], [28.7, 1842.0], [28.8, 1842.0], [28.9, 1842.0], [29.0, 1843.0], [29.1, 1843.0], [29.2, 1843.0], [29.3, 1843.0], [29.4, 1844.0], [29.5, 1844.0], [29.6, 1844.0], [29.7, 1844.0], [29.8, 1844.0], [29.9, 1845.0], [30.0, 1845.0], [30.1, 1845.0], [30.2, 1845.0], [30.3, 1845.0], [30.4, 1845.0], [30.5, 1845.0], [30.6, 1845.0], [30.7, 1846.0], [30.8, 1846.0], [30.9, 1846.0], [31.0, 1846.0], [31.1, 1846.0], [31.2, 1846.0], [31.3, 1847.0], [31.4, 1847.0], [31.5, 1847.0], [31.6, 1847.0], [31.7, 1847.0], [31.8, 1847.0], [31.9, 1848.0], [32.0, 1848.0], [32.1, 1848.0], [32.2, 1848.0], [32.3, 1848.0], [32.4, 1848.0], [32.5, 1848.0], [32.6, 1849.0], [32.7, 1849.0], [32.8, 1849.0], [32.9, 1849.0], [33.0, 1849.0], [33.1, 1849.0], [33.2, 1849.0], [33.3, 1850.0], [33.4, 1850.0], [33.5, 1850.0], [33.6, 1850.0], [33.7, 1850.0], [33.8, 1850.0], [33.9, 1850.0], [34.0, 1850.0], [34.1, 1851.0], [34.2, 1851.0], [34.3, 1851.0], [34.4, 1851.0], [34.5, 1851.0], [34.6, 1852.0], [34.7, 1852.0], [34.8, 1852.0], [34.9, 1852.0], [35.0, 1852.0], [35.1, 1852.0], [35.2, 1853.0], [35.3, 1853.0], [35.4, 1853.0], [35.5, 1853.0], [35.6, 1853.0], [35.7, 1853.0], [35.8, 1853.0], [35.9, 1854.0], [36.0, 1854.0], [36.1, 1854.0], [36.2, 1854.0], [36.3, 1854.0], [36.4, 1855.0], [36.5, 1855.0], [36.6, 1855.0], [36.7, 1855.0], [36.8, 1855.0], [36.9, 1855.0], [37.0, 1855.0], [37.1, 1856.0], [37.2, 1856.0], [37.3, 1856.0], [37.4, 1856.0], [37.5, 1856.0], [37.6, 1856.0], [37.7, 1856.0], [37.8, 1856.0], [37.9, 1856.0], [38.0, 1856.0], [38.1, 1856.0], [38.2, 1857.0], [38.3, 1857.0], [38.4, 1857.0], [38.5, 1857.0], [38.6, 1857.0], [38.7, 1857.0], [38.8, 1857.0], [38.9, 1858.0], [39.0, 1858.0], [39.1, 1858.0], [39.2, 1858.0], [39.3, 1858.0], [39.4, 1858.0], [39.5, 1859.0], [39.6, 1859.0], [39.7, 1859.0], [39.8, 1859.0], [39.9, 1859.0], [40.0, 1859.0], [40.1, 1859.0], [40.2, 1859.0], [40.3, 1859.0], [40.4, 1859.0], [40.5, 1860.0], [40.6, 1860.0], [40.7, 1860.0], [40.8, 1860.0], [40.9, 1860.0], [41.0, 1860.0], [41.1, 1860.0], [41.2, 1860.0], [41.3, 1861.0], [41.4, 1861.0], [41.5, 1861.0], [41.6, 1861.0], [41.7, 1861.0], [41.8, 1861.0], [41.9, 1861.0], [42.0, 1862.0], [42.1, 1862.0], [42.2, 1862.0], [42.3, 1862.0], [42.4, 1862.0], [42.5, 1862.0], [42.6, 1862.0], [42.7, 1862.0], [42.8, 1862.0], [42.9, 1863.0], [43.0, 1863.0], [43.1, 1863.0], [43.2, 1863.0], [43.3, 1863.0], [43.4, 1863.0], [43.5, 1863.0], [43.6, 1863.0], [43.7, 1863.0], [43.8, 1864.0], [43.9, 1864.0], [44.0, 1864.0], [44.1, 1864.0], [44.2, 1864.0], [44.3, 1864.0], [44.4, 1864.0], [44.5, 1865.0], [44.6, 1865.0], [44.7, 1865.0], [44.8, 1865.0], [44.9, 1865.0], [45.0, 1865.0], [45.1, 1865.0], [45.2, 1866.0], [45.3, 1866.0], [45.4, 1866.0], [45.5, 1866.0], [45.6, 1866.0], [45.7, 1866.0], [45.8, 1866.0], [45.9, 1867.0], [46.0, 1867.0], [46.1, 1867.0], [46.2, 1867.0], [46.3, 1868.0], [46.4, 1868.0], [46.5, 1868.0], [46.6, 1868.0], [46.7, 1868.0], [46.8, 1868.0], [46.9, 1868.0], [47.0, 1868.0], [47.1, 1868.0], [47.2, 1868.0], [47.3, 1868.0], [47.4, 1869.0], [47.5, 1869.0], [47.6, 1869.0], [47.7, 1869.0], [47.8, 1869.0], [47.9, 1869.0], [48.0, 1870.0], [48.1, 1870.0], [48.2, 1870.0], [48.3, 1870.0], [48.4, 1870.0], [48.5, 1870.0], [48.6, 1870.0], [48.7, 1871.0], [48.8, 1871.0], [48.9, 1871.0], [49.0, 1871.0], [49.1, 1871.0], [49.2, 1872.0], [49.3, 1872.0], [49.4, 1872.0], [49.5, 1872.0], [49.6, 1872.0], [49.7, 1872.0], [49.8, 1873.0], [49.9, 1873.0], [50.0, 1873.0], [50.1, 1873.0], [50.2, 1873.0], [50.3, 1873.0], [50.4, 1873.0], [50.5, 1873.0], [50.6, 1873.0], [50.7, 1874.0], [50.8, 1874.0], [50.9, 1874.0], [51.0, 1874.0], [51.1, 1874.0], [51.2, 1874.0], [51.3, 1875.0], [51.4, 1875.0], [51.5, 1875.0], [51.6, 1875.0], [51.7, 1875.0], [51.8, 1875.0], [51.9, 1875.0], [52.0, 1876.0], [52.1, 1876.0], [52.2, 1876.0], [52.3, 1876.0], [52.4, 1876.0], [52.5, 1877.0], [52.6, 1877.0], [52.7, 1877.0], [52.8, 1877.0], [52.9, 1877.0], [53.0, 1877.0], [53.1, 1877.0], [53.2, 1877.0], [53.3, 1878.0], [53.4, 1878.0], [53.5, 1878.0], [53.6, 1878.0], [53.7, 1878.0], [53.8, 1879.0], [53.9, 1879.0], [54.0, 1879.0], [54.1, 1879.0], [54.2, 1879.0], [54.3, 1879.0], [54.4, 1879.0], [54.5, 1879.0], [54.6, 1879.0], [54.7, 1880.0], [54.8, 1880.0], [54.9, 1880.0], [55.0, 1880.0], [55.1, 1880.0], [55.2, 1880.0], [55.3, 1881.0], [55.4, 1881.0], [55.5, 1881.0], [55.6, 1881.0], [55.7, 1881.0], [55.8, 1881.0], [55.9, 1882.0], [56.0, 1882.0], [56.1, 1882.0], [56.2, 1882.0], [56.3, 1882.0], [56.4, 1882.0], [56.5, 1883.0], [56.6, 1883.0], [56.7, 1883.0], [56.8, 1883.0], [56.9, 1883.0], [57.0, 1883.0], [57.1, 1884.0], [57.2, 1884.0], [57.3, 1884.0], [57.4, 1884.0], [57.5, 1884.0], [57.6, 1884.0], [57.7, 1885.0], [57.8, 1885.0], [57.9, 1885.0], [58.0, 1885.0], [58.1, 1885.0], [58.2, 1885.0], [58.3, 1886.0], [58.4, 1886.0], [58.5, 1886.0], [58.6, 1886.0], [58.7, 1886.0], [58.8, 1886.0], [58.9, 1887.0], [59.0, 1887.0], [59.1, 1887.0], [59.2, 1887.0], [59.3, 1887.0], [59.4, 1888.0], [59.5, 1888.0], [59.6, 1888.0], [59.7, 1888.0], [59.8, 1888.0], [59.9, 1889.0], [60.0, 1889.0], [60.1, 1889.0], [60.2, 1889.0], [60.3, 1889.0], [60.4, 1889.0], [60.5, 1890.0], [60.6, 1890.0], [60.7, 1890.0], [60.8, 1891.0], [60.9, 1891.0], [61.0, 1891.0], [61.1, 1891.0], [61.2, 1891.0], [61.3, 1891.0], [61.4, 1892.0], [61.5, 1892.0], [61.6, 1892.0], [61.7, 1893.0], [61.8, 1893.0], [61.9, 1893.0], [62.0, 1893.0], [62.1, 1893.0], [62.2, 1893.0], [62.3, 1893.0], [62.4, 1894.0], [62.5, 1894.0], [62.6, 1894.0], [62.7, 1894.0], [62.8, 1894.0], [62.9, 1894.0], [63.0, 1895.0], [63.1, 1895.0], [63.2, 1895.0], [63.3, 1895.0], [63.4, 1896.0], [63.5, 1896.0], [63.6, 1896.0], [63.7, 1896.0], [63.8, 1896.0], [63.9, 1897.0], [64.0, 1897.0], [64.1, 1897.0], [64.2, 1898.0], [64.3, 1898.0], [64.4, 1898.0], [64.5, 1899.0], [64.6, 1899.0], [64.7, 1899.0], [64.8, 1900.0], [64.9, 1900.0], [65.0, 1900.0], [65.1, 1900.0], [65.2, 1900.0], [65.3, 1901.0], [65.4, 1901.0], [65.5, 1902.0], [65.6, 1902.0], [65.7, 1903.0], [65.8, 1903.0], [65.9, 1903.0], [66.0, 1903.0], [66.1, 1904.0], [66.2, 1904.0], [66.3, 1904.0], [66.4, 1904.0], [66.5, 1905.0], [66.6, 1905.0], [66.7, 1905.0], [66.8, 1905.0], [66.9, 1905.0], [67.0, 1905.0], [67.1, 1906.0], [67.2, 1906.0], [67.3, 1907.0], [67.4, 1907.0], [67.5, 1907.0], [67.6, 1908.0], [67.7, 1908.0], [67.8, 1908.0], [67.9, 1909.0], [68.0, 1909.0], [68.1, 1910.0], [68.2, 1910.0], [68.3, 1911.0], [68.4, 1911.0], [68.5, 1912.0], [68.6, 1912.0], [68.7, 1912.0], [68.8, 1912.0], [68.9, 1912.0], [69.0, 1913.0], [69.1, 1913.0], [69.2, 1913.0], [69.3, 1913.0], [69.4, 1913.0], [69.5, 1914.0], [69.6, 1914.0], [69.7, 1914.0], [69.8, 1915.0], [69.9, 1915.0], [70.0, 1916.0], [70.1, 1917.0], [70.2, 1917.0], [70.3, 1918.0], [70.4, 1918.0], [70.5, 1918.0], [70.6, 1919.0], [70.7, 1919.0], [70.8, 1919.0], [70.9, 1919.0], [71.0, 1920.0], [71.1, 1920.0], [71.2, 1921.0], [71.3, 1921.0], [71.4, 1922.0], [71.5, 1922.0], [71.6, 1922.0], [71.7, 1923.0], [71.8, 1924.0], [71.9, 1924.0], [72.0, 1925.0], [72.1, 1925.0], [72.2, 1925.0], [72.3, 1926.0], [72.4, 1926.0], [72.5, 1926.0], [72.6, 1926.0], [72.7, 1927.0], [72.8, 1927.0], [72.9, 1927.0], [73.0, 1928.0], [73.1, 1929.0], [73.2, 1929.0], [73.3, 1930.0], [73.4, 1930.0], [73.5, 1930.0], [73.6, 1931.0], [73.7, 1931.0], [73.8, 1932.0], [73.9, 1932.0], [74.0, 1932.0], [74.1, 1933.0], [74.2, 1934.0], [74.3, 1935.0], [74.4, 1935.0], [74.5, 1936.0], [74.6, 1936.0], [74.7, 1936.0], [74.8, 1937.0], [74.9, 1938.0], [75.0, 1938.0], [75.1, 1939.0], [75.2, 1939.0], [75.3, 1939.0], [75.4, 1939.0], [75.5, 1940.0], [75.6, 1940.0], [75.7, 1941.0], [75.8, 1941.0], [75.9, 1942.0], [76.0, 1943.0], [76.1, 1943.0], [76.2, 1943.0], [76.3, 1944.0], [76.4, 1944.0], [76.5, 1945.0], [76.6, 1946.0], [76.7, 1946.0], [76.8, 1947.0], [76.9, 1948.0], [77.0, 1948.0], [77.1, 1948.0], [77.2, 1949.0], [77.3, 1949.0], [77.4, 1949.0], [77.5, 1950.0], [77.6, 1950.0], [77.7, 1950.0], [77.8, 1950.0], [77.9, 1951.0], [78.0, 1951.0], [78.1, 1952.0], [78.2, 1953.0], [78.3, 1954.0], [78.4, 1954.0], [78.5, 1955.0], [78.6, 1956.0], [78.7, 1956.0], [78.8, 1957.0], [78.9, 1957.0], [79.0, 1957.0], [79.1, 1959.0], [79.2, 1959.0], [79.3, 1960.0], [79.4, 1960.0], [79.5, 1961.0], [79.6, 1961.0], [79.7, 1962.0], [79.8, 1963.0], [79.9, 1964.0], [80.0, 1964.0], [80.1, 1964.0], [80.2, 1966.0], [80.3, 1966.0], [80.4, 1968.0], [80.5, 1969.0], [80.6, 1970.0], [80.7, 1971.0], [80.8, 1973.0], [80.9, 1973.0], [81.0, 1974.0], [81.1, 1975.0], [81.2, 1975.0], [81.3, 1976.0], [81.4, 1977.0], [81.5, 1977.0], [81.6, 1978.0], [81.7, 1979.0], [81.8, 1981.0], [81.9, 1981.0], [82.0, 1984.0], [82.1, 1985.0], [82.2, 1985.0], [82.3, 1986.0], [82.4, 1986.0], [82.5, 1986.0], [82.6, 1988.0], [82.7, 1989.0], [82.8, 1990.0], [82.9, 1992.0], [83.0, 1992.0], [83.1, 1993.0], [83.2, 1994.0], [83.3, 1997.0], [83.4, 2001.0], [83.5, 2002.0], [83.6, 2004.0], [83.7, 2006.0], [83.8, 2007.0], [83.9, 2008.0], [84.0, 2010.0], [84.1, 2012.0], [84.2, 2015.0], [84.3, 2017.0], [84.4, 2019.0], [84.5, 2022.0], [84.6, 2024.0], [84.7, 2034.0], [84.8, 2038.0], [84.9, 2040.0], [85.0, 2045.0], [85.1, 2048.0], [85.2, 2052.0], [85.3, 2056.0], [85.4, 2057.0], [85.5, 2061.0], [85.6, 2069.0], [85.7, 2072.0], [85.8, 2074.0], [85.9, 2079.0], [86.0, 2082.0], [86.1, 2085.0], [86.2, 2089.0], [86.3, 2090.0], [86.4, 2090.0], [86.5, 2092.0], [86.6, 2094.0], [86.7, 2097.0], [86.8, 2105.0], [86.9, 2107.0], [87.0, 2108.0], [87.1, 2110.0], [87.2, 2111.0], [87.3, 2115.0], [87.4, 2118.0], [87.5, 2122.0], [87.6, 2122.0], [87.7, 2123.0], [87.8, 2125.0], [87.9, 2127.0], [88.0, 2129.0], [88.1, 2131.0], [88.2, 2134.0], [88.3, 2136.0], [88.4, 2139.0], [88.5, 2140.0], [88.6, 2143.0], [88.7, 2146.0], [88.8, 2150.0], [88.9, 2152.0], [89.0, 2155.0], [89.1, 2156.0], [89.2, 2162.0], [89.3, 2166.0], [89.4, 2167.0], [89.5, 2171.0], [89.6, 2175.0], [89.7, 2177.0], [89.8, 2180.0], [89.9, 2184.0], [90.0, 2186.0], [90.1, 2193.0], [90.2, 2194.0], [90.3, 2199.0], [90.4, 2203.0], [90.5, 2206.0], [90.6, 2210.0], [90.7, 2217.0], [90.8, 2231.0], [90.9, 2234.0], [91.0, 2237.0], [91.1, 2243.0], [91.2, 2248.0], [91.3, 2266.0], [91.4, 2271.0], [91.5, 2280.0], [91.6, 2291.0], [91.7, 2300.0], [91.8, 2336.0], [91.9, 2381.0], [92.0, 2390.0], [92.1, 2400.0], [92.2, 2428.0], [92.3, 2436.0], [92.4, 2445.0], [92.5, 2451.0], [92.6, 2460.0], [92.7, 2474.0], [92.8, 2481.0], [92.9, 2496.0], [93.0, 2502.0], [93.1, 2512.0], [93.2, 2516.0], [93.3, 2517.0], [93.4, 2528.0], [93.5, 2535.0], [93.6, 2549.0], [93.7, 2558.0], [93.8, 2570.0], [93.9, 2584.0], [94.0, 2640.0], [94.1, 2649.0], [94.2, 2670.0], [94.3, 2688.0], [94.4, 2712.0], [94.5, 2719.0], [94.6, 2769.0], [94.7, 2785.0], [94.8, 2858.0], [94.9, 2892.0], [95.0, 2965.0], [95.1, 3048.0], [95.2, 3187.0], [95.3, 3275.0], [95.4, 3444.0], [95.5, 3507.0], [95.6, 3521.0], [95.7, 3535.0], [95.8, 3557.0], [95.9, 3566.0], [96.0, 3583.0], [96.1, 3600.0], [96.2, 3628.0], [96.3, 3660.0], [96.4, 3704.0], [96.5, 3868.0], [96.6, 3954.0], [96.7, 4374.0], [96.8, 4429.0], [96.9, 4500.0], [97.0, 4614.0], [97.1, 4627.0], [97.2, 4672.0], [97.3, 4707.0], [97.4, 4739.0], [97.5, 4766.0], [97.6, 4872.0], [97.7, 4908.0], [97.8, 4945.0], [97.9, 5185.0], [98.0, 5501.0], [98.1, 5614.0], [98.2, 5749.0], [98.3, 5762.0], [98.4, 5957.0], [98.5, 5991.0], [98.6, 6018.0], [98.7, 6133.0], [98.8, 6637.0], [98.9, 6888.0], [99.0, 7083.0], [99.1, 7341.0], [99.2, 7764.0], [99.3, 7983.0], [99.4, 8476.0], [99.5, 8893.0], [99.6, 9651.0], [99.7, 11034.0], [99.8, 12402.0], [99.9, 14140.0]], "isOverall": false, "label": "User Login", "isController": false}, {"data": [[0.0, 354.0], [0.1, 355.0], [0.2, 355.0], [0.3, 356.0], [0.4, 356.0], [0.5, 357.0], [0.6, 357.0], [0.7, 357.0], [0.8, 357.0], [0.9, 357.0], [1.0, 358.0], [1.1, 358.0], [1.2, 358.0], [1.3, 358.0], [1.4, 358.0], [1.5, 358.0], [1.6, 358.0], [1.7, 358.0], [1.8, 358.0], [1.9, 358.0], [2.0, 358.0], [2.1, 358.0], [2.2, 359.0], [2.3, 359.0], [2.4, 359.0], [2.5, 359.0], [2.6, 359.0], [2.7, 359.0], [2.8, 359.0], [2.9, 359.0], [3.0, 359.0], [3.1, 359.0], [3.2, 359.0], [3.3, 359.0], [3.4, 359.0], [3.5, 359.0], [3.6, 359.0], [3.7, 360.0], [3.8, 360.0], [3.9, 360.0], [4.0, 360.0], [4.1, 360.0], [4.2, 360.0], [4.3, 360.0], [4.4, 360.0], [4.5, 360.0], [4.6, 360.0], [4.7, 360.0], [4.8, 360.0], [4.9, 360.0], [5.0, 360.0], [5.1, 360.0], [5.2, 360.0], [5.3, 360.0], [5.4, 360.0], [5.5, 361.0], [5.6, 361.0], [5.7, 361.0], [5.8, 361.0], [5.9, 361.0], [6.0, 361.0], [6.1, 361.0], [6.2, 361.0], [6.3, 361.0], [6.4, 361.0], [6.5, 361.0], [6.6, 361.0], [6.7, 361.0], [6.8, 361.0], [6.9, 361.0], [7.0, 361.0], [7.1, 361.0], [7.2, 361.0], [7.3, 361.0], [7.4, 361.0], [7.5, 361.0], [7.6, 361.0], [7.7, 361.0], [7.8, 362.0], [7.9, 362.0], [8.0, 362.0], [8.1, 362.0], [8.2, 362.0], [8.3, 362.0], [8.4, 362.0], [8.5, 362.0], [8.6, 362.0], [8.7, 362.0], [8.8, 362.0], [8.9, 362.0], [9.0, 362.0], [9.1, 362.0], [9.2, 362.0], [9.3, 362.0], [9.4, 362.0], [9.5, 363.0], [9.6, 363.0], [9.7, 363.0], [9.8, 363.0], [9.9, 363.0], [10.0, 363.0], [10.1, 363.0], [10.2, 363.0], [10.3, 363.0], [10.4, 363.0], [10.5, 363.0], [10.6, 363.0], [10.7, 363.0], [10.8, 363.0], [10.9, 363.0], [11.0, 363.0], [11.1, 363.0], [11.2, 363.0], [11.3, 363.0], [11.4, 363.0], [11.5, 364.0], [11.6, 364.0], [11.7, 364.0], [11.8, 364.0], [11.9, 364.0], [12.0, 364.0], [12.1, 364.0], [12.2, 364.0], [12.3, 364.0], [12.4, 364.0], [12.5, 364.0], [12.6, 364.0], [12.7, 364.0], [12.8, 364.0], [12.9, 364.0], [13.0, 364.0], [13.1, 364.0], [13.2, 364.0], [13.3, 364.0], [13.4, 364.0], [13.5, 364.0], [13.6, 364.0], [13.7, 364.0], [13.8, 364.0], [13.9, 364.0], [14.0, 364.0], [14.1, 364.0], [14.2, 365.0], [14.3, 365.0], [14.4, 365.0], [14.5, 365.0], [14.6, 365.0], [14.7, 365.0], [14.8, 365.0], [14.9, 365.0], [15.0, 365.0], [15.1, 365.0], [15.2, 365.0], [15.3, 365.0], [15.4, 365.0], [15.5, 365.0], [15.6, 365.0], [15.7, 365.0], [15.8, 365.0], [15.9, 365.0], [16.0, 365.0], [16.1, 365.0], [16.2, 365.0], [16.3, 365.0], [16.4, 365.0], [16.5, 366.0], [16.6, 366.0], [16.7, 366.0], [16.8, 366.0], [16.9, 366.0], [17.0, 366.0], [17.1, 366.0], [17.2, 366.0], [17.3, 366.0], [17.4, 366.0], [17.5, 366.0], [17.6, 366.0], [17.7, 366.0], [17.8, 366.0], [17.9, 366.0], [18.0, 366.0], [18.1, 366.0], [18.2, 366.0], [18.3, 366.0], [18.4, 366.0], [18.5, 366.0], [18.6, 366.0], [18.7, 366.0], [18.8, 366.0], [18.9, 366.0], [19.0, 367.0], [19.1, 367.0], [19.2, 367.0], [19.3, 367.0], [19.4, 367.0], [19.5, 367.0], [19.6, 367.0], [19.7, 367.0], [19.8, 367.0], [19.9, 367.0], [20.0, 367.0], [20.1, 367.0], [20.2, 367.0], [20.3, 367.0], [20.4, 367.0], [20.5, 367.0], [20.6, 367.0], [20.7, 367.0], [20.8, 367.0], [20.9, 367.0], [21.0, 367.0], [21.1, 367.0], [21.2, 367.0], [21.3, 367.0], [21.4, 367.0], [21.5, 367.0], [21.6, 367.0], [21.7, 367.0], [21.8, 367.0], [21.9, 368.0], [22.0, 368.0], [22.1, 368.0], [22.2, 368.0], [22.3, 368.0], [22.4, 368.0], [22.5, 368.0], [22.6, 368.0], [22.7, 368.0], [22.8, 368.0], [22.9, 368.0], [23.0, 368.0], [23.1, 368.0], [23.2, 368.0], [23.3, 368.0], [23.4, 368.0], [23.5, 368.0], [23.6, 368.0], [23.7, 368.0], [23.8, 368.0], [23.9, 368.0], [24.0, 368.0], [24.1, 368.0], [24.2, 368.0], [24.3, 368.0], [24.4, 368.0], [24.5, 368.0], [24.6, 368.0], [24.7, 368.0], [24.8, 368.0], [24.9, 368.0], [25.0, 368.0], [25.1, 368.0], [25.2, 368.0], [25.3, 368.0], [25.4, 368.0], [25.5, 368.0], [25.6, 368.0], [25.7, 368.0], [25.8, 368.0], [25.9, 368.0], [26.0, 368.0], [26.1, 369.0], [26.2, 369.0], [26.3, 369.0], [26.4, 369.0], [26.5, 369.0], [26.6, 369.0], [26.7, 369.0], [26.8, 369.0], [26.9, 369.0], [27.0, 369.0], [27.1, 369.0], [27.2, 369.0], [27.3, 369.0], [27.4, 369.0], [27.5, 369.0], [27.6, 369.0], [27.7, 369.0], [27.8, 369.0], [27.9, 369.0], [28.0, 369.0], [28.1, 369.0], [28.2, 369.0], [28.3, 369.0], [28.4, 369.0], [28.5, 369.0], [28.6, 369.0], [28.7, 369.0], [28.8, 369.0], [28.9, 369.0], [29.0, 369.0], [29.1, 369.0], [29.2, 369.0], [29.3, 369.0], [29.4, 369.0], [29.5, 369.0], [29.6, 369.0], [29.7, 369.0], [29.8, 370.0], [29.9, 370.0], [30.0, 370.0], [30.1, 370.0], [30.2, 370.0], [30.3, 370.0], [30.4, 370.0], [30.5, 370.0], [30.6, 370.0], [30.7, 370.0], [30.8, 370.0], [30.9, 370.0], [31.0, 370.0], [31.1, 370.0], [31.2, 370.0], [31.3, 370.0], [31.4, 370.0], [31.5, 370.0], [31.6, 370.0], [31.7, 370.0], [31.8, 370.0], [31.9, 370.0], [32.0, 370.0], [32.1, 370.0], [32.2, 370.0], [32.3, 370.0], [32.4, 370.0], [32.5, 370.0], [32.6, 370.0], [32.7, 370.0], [32.8, 370.0], [32.9, 370.0], [33.0, 370.0], [33.1, 370.0], [33.2, 370.0], [33.3, 370.0], [33.4, 370.0], [33.5, 370.0], [33.6, 370.0], [33.7, 370.0], [33.8, 370.0], [33.9, 371.0], [34.0, 371.0], [34.1, 371.0], [34.2, 371.0], [34.3, 371.0], [34.4, 371.0], [34.5, 371.0], [34.6, 371.0], [34.7, 371.0], [34.8, 371.0], [34.9, 371.0], [35.0, 371.0], [35.1, 371.0], [35.2, 371.0], [35.3, 371.0], [35.4, 371.0], [35.5, 371.0], [35.6, 371.0], [35.7, 371.0], [35.8, 371.0], [35.9, 371.0], [36.0, 371.0], [36.1, 371.0], [36.2, 371.0], [36.3, 371.0], [36.4, 371.0], [36.5, 371.0], [36.6, 371.0], [36.7, 371.0], [36.8, 371.0], [36.9, 371.0], [37.0, 371.0], [37.1, 371.0], [37.2, 371.0], [37.3, 371.0], [37.4, 371.0], [37.5, 371.0], [37.6, 371.0], [37.7, 371.0], [37.8, 371.0], [37.9, 371.0], [38.0, 371.0], [38.1, 371.0], [38.2, 371.0], [38.3, 371.0], [38.4, 371.0], [38.5, 371.0], [38.6, 371.0], [38.7, 372.0], [38.8, 372.0], [38.9, 372.0], [39.0, 372.0], [39.1, 372.0], [39.2, 372.0], [39.3, 372.0], [39.4, 372.0], [39.5, 372.0], [39.6, 372.0], [39.7, 372.0], [39.8, 372.0], [39.9, 372.0], [40.0, 372.0], [40.1, 372.0], [40.2, 372.0], [40.3, 372.0], [40.4, 372.0], [40.5, 372.0], [40.6, 372.0], [40.7, 372.0], [40.8, 372.0], [40.9, 372.0], [41.0, 372.0], [41.1, 372.0], [41.2, 372.0], [41.3, 372.0], [41.4, 372.0], [41.5, 372.0], [41.6, 372.0], [41.7, 372.0], [41.8, 372.0], [41.9, 372.0], [42.0, 372.0], [42.1, 372.0], [42.2, 372.0], [42.3, 372.0], [42.4, 372.0], [42.5, 372.0], [42.6, 372.0], [42.7, 372.0], [42.8, 372.0], [42.9, 372.0], [43.0, 372.0], [43.1, 372.0], [43.2, 372.0], [43.3, 372.0], [43.4, 372.0], [43.5, 372.0], [43.6, 372.0], [43.7, 372.0], [43.8, 372.0], [43.9, 373.0], [44.0, 373.0], [44.1, 373.0], [44.2, 373.0], [44.3, 373.0], [44.4, 373.0], [44.5, 373.0], [44.6, 373.0], [44.7, 373.0], [44.8, 373.0], [44.9, 373.0], [45.0, 373.0], [45.1, 373.0], [45.2, 373.0], [45.3, 373.0], [45.4, 373.0], [45.5, 373.0], [45.6, 373.0], [45.7, 373.0], [45.8, 373.0], [45.9, 373.0], [46.0, 373.0], [46.1, 373.0], [46.2, 373.0], [46.3, 373.0], [46.4, 373.0], [46.5, 373.0], [46.6, 373.0], [46.7, 373.0], [46.8, 373.0], [46.9, 373.0], [47.0, 373.0], [47.1, 373.0], [47.2, 373.0], [47.3, 373.0], [47.4, 373.0], [47.5, 373.0], [47.6, 373.0], [47.7, 373.0], [47.8, 373.0], [47.9, 373.0], [48.0, 373.0], [48.1, 373.0], [48.2, 373.0], [48.3, 373.0], [48.4, 373.0], [48.5, 373.0], [48.6, 373.0], [48.7, 373.0], [48.8, 373.0], [48.9, 373.0], [49.0, 374.0], [49.1, 374.0], [49.2, 374.0], [49.3, 374.0], [49.4, 374.0], [49.5, 374.0], [49.6, 374.0], [49.7, 374.0], [49.8, 374.0], [49.9, 374.0], [50.0, 374.0], [50.1, 374.0], [50.2, 374.0], [50.3, 374.0], [50.4, 374.0], [50.5, 374.0], [50.6, 374.0], [50.7, 374.0], [50.8, 374.0], [50.9, 374.0], [51.0, 374.0], [51.1, 374.0], [51.2, 374.0], [51.3, 374.0], [51.4, 374.0], [51.5, 374.0], [51.6, 374.0], [51.7, 374.0], [51.8, 374.0], [51.9, 374.0], [52.0, 374.0], [52.1, 374.0], [52.2, 374.0], [52.3, 374.0], [52.4, 374.0], [52.5, 374.0], [52.6, 374.0], [52.7, 374.0], [52.8, 374.0], [52.9, 374.0], [53.0, 374.0], [53.1, 374.0], [53.2, 374.0], [53.3, 374.0], [53.4, 374.0], [53.5, 374.0], [53.6, 374.0], [53.7, 374.0], [53.8, 374.0], [53.9, 375.0], [54.0, 375.0], [54.1, 375.0], [54.2, 375.0], [54.3, 375.0], [54.4, 375.0], [54.5, 375.0], [54.6, 375.0], [54.7, 375.0], [54.8, 375.0], [54.9, 375.0], [55.0, 375.0], [55.1, 375.0], [55.2, 375.0], [55.3, 375.0], [55.4, 375.0], [55.5, 375.0], [55.6, 375.0], [55.7, 375.0], [55.8, 375.0], [55.9, 375.0], [56.0, 375.0], [56.1, 375.0], [56.2, 375.0], [56.3, 375.0], [56.4, 375.0], [56.5, 375.0], [56.6, 375.0], [56.7, 375.0], [56.8, 375.0], [56.9, 375.0], [57.0, 375.0], [57.1, 375.0], [57.2, 375.0], [57.3, 375.0], [57.4, 375.0], [57.5, 375.0], [57.6, 375.0], [57.7, 375.0], [57.8, 375.0], [57.9, 375.0], [58.0, 375.0], [58.1, 375.0], [58.2, 375.0], [58.3, 376.0], [58.4, 376.0], [58.5, 376.0], [58.6, 376.0], [58.7, 376.0], [58.8, 376.0], [58.9, 376.0], [59.0, 376.0], [59.1, 376.0], [59.2, 376.0], [59.3, 376.0], [59.4, 376.0], [59.5, 376.0], [59.6, 376.0], [59.7, 376.0], [59.8, 376.0], [59.9, 376.0], [60.0, 376.0], [60.1, 376.0], [60.2, 376.0], [60.3, 376.0], [60.4, 376.0], [60.5, 376.0], [60.6, 376.0], [60.7, 376.0], [60.8, 376.0], [60.9, 376.0], [61.0, 376.0], [61.1, 376.0], [61.2, 376.0], [61.3, 376.0], [61.4, 376.0], [61.5, 376.0], [61.6, 376.0], [61.7, 376.0], [61.8, 376.0], [61.9, 376.0], [62.0, 376.0], [62.1, 376.0], [62.2, 376.0], [62.3, 377.0], [62.4, 377.0], [62.5, 377.0], [62.6, 377.0], [62.7, 377.0], [62.8, 377.0], [62.9, 377.0], [63.0, 377.0], [63.1, 377.0], [63.2, 377.0], [63.3, 377.0], [63.4, 377.0], [63.5, 377.0], [63.6, 377.0], [63.7, 377.0], [63.8, 377.0], [63.9, 377.0], [64.0, 377.0], [64.1, 377.0], [64.2, 377.0], [64.3, 377.0], [64.4, 377.0], [64.5, 377.0], [64.6, 377.0], [64.7, 377.0], [64.8, 377.0], [64.9, 377.0], [65.0, 377.0], [65.1, 377.0], [65.2, 377.0], [65.3, 377.0], [65.4, 377.0], [65.5, 377.0], [65.6, 377.0], [65.7, 377.0], [65.8, 377.0], [65.9, 377.0], [66.0, 377.0], [66.1, 378.0], [66.2, 378.0], [66.3, 378.0], [66.4, 378.0], [66.5, 378.0], [66.6, 378.0], [66.7, 378.0], [66.8, 378.0], [66.9, 378.0], [67.0, 378.0], [67.1, 378.0], [67.2, 378.0], [67.3, 378.0], [67.4, 378.0], [67.5, 378.0], [67.6, 378.0], [67.7, 378.0], [67.8, 378.0], [67.9, 378.0], [68.0, 378.0], [68.1, 378.0], [68.2, 378.0], [68.3, 378.0], [68.4, 378.0], [68.5, 378.0], [68.6, 378.0], [68.7, 378.0], [68.8, 378.0], [68.9, 378.0], [69.0, 378.0], [69.1, 378.0], [69.2, 378.0], [69.3, 378.0], [69.4, 378.0], [69.5, 379.0], [69.6, 379.0], [69.7, 379.0], [69.8, 379.0], [69.9, 379.0], [70.0, 379.0], [70.1, 379.0], [70.2, 379.0], [70.3, 379.0], [70.4, 379.0], [70.5, 379.0], [70.6, 379.0], [70.7, 379.0], [70.8, 379.0], [70.9, 379.0], [71.0, 379.0], [71.1, 379.0], [71.2, 379.0], [71.3, 379.0], [71.4, 379.0], [71.5, 379.0], [71.6, 379.0], [71.7, 379.0], [71.8, 379.0], [71.9, 379.0], [72.0, 379.0], [72.1, 379.0], [72.2, 379.0], [72.3, 379.0], [72.4, 380.0], [72.5, 380.0], [72.6, 380.0], [72.7, 380.0], [72.8, 380.0], [72.9, 380.0], [73.0, 380.0], [73.1, 380.0], [73.2, 380.0], [73.3, 380.0], [73.4, 380.0], [73.5, 380.0], [73.6, 380.0], [73.7, 380.0], [73.8, 380.0], [73.9, 380.0], [74.0, 380.0], [74.1, 380.0], [74.2, 380.0], [74.3, 380.0], [74.4, 380.0], [74.5, 380.0], [74.6, 380.0], [74.7, 380.0], [74.8, 381.0], [74.9, 381.0], [75.0, 381.0], [75.1, 381.0], [75.2, 381.0], [75.3, 381.0], [75.4, 381.0], [75.5, 381.0], [75.6, 381.0], [75.7, 381.0], [75.8, 381.0], [75.9, 381.0], [76.0, 381.0], [76.1, 381.0], [76.2, 381.0], [76.3, 381.0], [76.4, 381.0], [76.5, 381.0], [76.6, 381.0], [76.7, 381.0], [76.8, 381.0], [76.9, 381.0], [77.0, 381.0], [77.1, 382.0], [77.2, 382.0], [77.3, 382.0], [77.4, 382.0], [77.5, 382.0], [77.6, 382.0], [77.7, 382.0], [77.8, 382.0], [77.9, 382.0], [78.0, 382.0], [78.1, 382.0], [78.2, 382.0], [78.3, 382.0], [78.4, 382.0], [78.5, 382.0], [78.6, 382.0], [78.7, 383.0], [78.8, 383.0], [78.9, 383.0], [79.0, 383.0], [79.1, 383.0], [79.2, 383.0], [79.3, 383.0], [79.4, 383.0], [79.5, 383.0], [79.6, 383.0], [79.7, 383.0], [79.8, 383.0], [79.9, 383.0], [80.0, 383.0], [80.1, 383.0], [80.2, 383.0], [80.3, 383.0], [80.4, 383.0], [80.5, 383.0], [80.6, 384.0], [80.7, 384.0], [80.8, 384.0], [80.9, 384.0], [81.0, 384.0], [81.1, 384.0], [81.2, 384.0], [81.3, 384.0], [81.4, 384.0], [81.5, 384.0], [81.6, 384.0], [81.7, 384.0], [81.8, 384.0], [81.9, 384.0], [82.0, 384.0], [82.1, 384.0], [82.2, 385.0], [82.3, 385.0], [82.4, 385.0], [82.5, 385.0], [82.6, 385.0], [82.7, 385.0], [82.8, 385.0], [82.9, 385.0], [83.0, 385.0], [83.1, 385.0], [83.2, 385.0], [83.3, 385.0], [83.4, 386.0], [83.5, 386.0], [83.6, 386.0], [83.7, 386.0], [83.8, 386.0], [83.9, 386.0], [84.0, 386.0], [84.1, 386.0], [84.2, 386.0], [84.3, 386.0], [84.4, 387.0], [84.5, 387.0], [84.6, 387.0], [84.7, 387.0], [84.8, 387.0], [84.9, 387.0], [85.0, 387.0], [85.1, 387.0], [85.2, 387.0], [85.3, 388.0], [85.4, 388.0], [85.5, 388.0], [85.6, 388.0], [85.7, 388.0], [85.8, 388.0], [85.9, 388.0], [86.0, 388.0], [86.1, 388.0], [86.2, 389.0], [86.3, 389.0], [86.4, 389.0], [86.5, 389.0], [86.6, 389.0], [86.7, 390.0], [86.8, 390.0], [86.9, 390.0], [87.0, 390.0], [87.1, 390.0], [87.2, 391.0], [87.3, 391.0], [87.4, 391.0], [87.5, 392.0], [87.6, 392.0], [87.7, 392.0], [87.8, 393.0], [87.9, 393.0], [88.0, 394.0], [88.1, 394.0], [88.2, 394.0], [88.3, 396.0], [88.4, 396.0], [88.5, 397.0], [88.6, 397.0], [88.7, 397.0], [88.8, 398.0], [88.9, 398.0], [89.0, 399.0], [89.1, 399.0], [89.2, 400.0], [89.3, 401.0], [89.4, 402.0], [89.5, 403.0], [89.6, 403.0], [89.7, 404.0], [89.8, 405.0], [89.9, 406.0], [90.0, 407.0], [90.1, 407.0], [90.2, 409.0], [90.3, 410.0], [90.4, 412.0], [90.5, 414.0], [90.6, 417.0], [90.7, 420.0], [90.8, 421.0], [90.9, 425.0], [91.0, 427.0], [91.1, 427.0], [91.2, 430.0], [91.3, 439.0], [91.4, 440.0], [91.5, 442.0], [91.6, 448.0], [91.7, 456.0], [91.8, 469.0], [91.9, 480.0], [92.0, 480.0], [92.1, 481.0], [92.2, 482.0], [92.3, 483.0], [92.4, 484.0], [92.5, 485.0], [92.6, 486.0], [92.7, 488.0], [92.8, 489.0], [92.9, 489.0], [93.0, 490.0], [93.1, 491.0], [93.2, 492.0], [93.3, 493.0], [93.4, 494.0], [93.5, 495.0], [93.6, 495.0], [93.7, 496.0], [93.8, 496.0], [93.9, 497.0], [94.0, 497.0], [94.1, 498.0], [94.2, 498.0], [94.3, 499.0], [94.4, 499.0], [94.5, 499.0], [94.6, 502.0], [94.7, 502.0], [94.8, 504.0], [94.9, 506.0], [95.0, 506.0], [95.1, 513.0], [95.2, 581.0], [95.3, 607.0], [95.4, 616.0], [95.5, 620.0], [95.6, 622.0], [95.7, 624.0], [95.8, 627.0], [95.9, 629.0], [96.0, 630.0], [96.1, 633.0], [96.2, 633.0], [96.3, 634.0], [96.4, 635.0], [96.5, 636.0], [96.6, 636.0], [96.7, 638.0], [96.8, 640.0], [96.9, 641.0], [97.0, 643.0], [97.1, 644.0], [97.2, 649.0], [97.3, 659.0], [97.4, 680.0], [97.5, 698.0], [97.6, 716.0], [97.7, 734.0], [97.8, 757.0], [97.9, 803.0], [98.0, 843.0], [98.1, 873.0], [98.2, 916.0], [98.3, 1218.0], [98.4, 1393.0], [98.5, 1440.0], [98.6, 1462.0], [98.7, 1478.0], [98.8, 1491.0], [98.9, 1502.0], [99.0, 1513.0], [99.1, 1526.0], [99.2, 1584.0], [99.3, 2046.0], [99.4, 2381.0], [99.5, 2433.0], [99.6, 3360.0], [99.7, 3374.0], [99.8, 4372.0], [99.9, 6371.0]], "isOverall": false, "label": "Search Booking", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 300.0, "maxY": 2975.0, "series": [{"data": [[8600.0, 1.0], [2300.0, 1.0], [600.0, 94.0], [2600.0, 5.0], [700.0, 10.0], [2700.0, 3.0], [2800.0, 1.0], [800.0, 7.0], [3300.0, 1.0], [900.0, 3.0], [3600.0, 1.0], [1000.0, 2.0], [4300.0, 1.0], [1100.0, 1.0], [300.0, 2975.0], [1200.0, 2.0], [4900.0, 1.0], [5100.0, 1.0], [1500.0, 23.0], [6300.0, 2.0], [400.0, 157.0], [1600.0, 12.0], [1800.0, 2.0], [500.0, 27.0]], "isOverall": false, "label": "Create Booking", "isController": false}, {"data": [[1400.0, 12.0], [1500.0, 122.0], [1600.0, 61.0], [1700.0, 145.0], [1800.0, 1819.0], [1900.0, 620.0], [2000.0, 112.0], [2100.0, 119.0], [2200.0, 46.0], [2300.0, 13.0], [2400.0, 30.0], [2500.0, 33.0], [2600.0, 14.0], [2700.0, 11.0], [2800.0, 8.0], [2900.0, 4.0], [3000.0, 1.0], [3100.0, 4.0], [3200.0, 4.0], [3300.0, 1.0], [3400.0, 4.0], [3500.0, 20.0], [3600.0, 10.0], [3700.0, 1.0], [3800.0, 4.0], [3900.0, 2.0], [4200.0, 2.0], [4300.0, 1.0], [4100.0, 1.0], [4400.0, 5.0], [4600.0, 10.0], [4500.0, 3.0], [4700.0, 9.0], [4800.0, 5.0], [5000.0, 2.0], [4900.0, 4.0], [5100.0, 2.0], [5200.0, 2.0], [5500.0, 2.0], [5600.0, 4.0], [5700.0, 6.0], [6000.0, 5.0], [5900.0, 6.0], [6100.0, 2.0], [6400.0, 1.0], [6600.0, 2.0], [6800.0, 3.0], [6900.0, 1.0], [7100.0, 1.0], [7000.0, 2.0], [7300.0, 1.0], [7400.0, 1.0], [7200.0, 2.0], [7700.0, 2.0], [7900.0, 3.0], [8100.0, 1.0], [8400.0, 1.0], [8300.0, 1.0], [8500.0, 2.0], [8200.0, 1.0], [8800.0, 1.0], [9300.0, 1.0], [9600.0, 2.0], [9900.0, 1.0], [9800.0, 1.0], [10600.0, 1.0], [11000.0, 2.0], [12400.0, 1.0], [12600.0, 1.0], [12300.0, 1.0], [13800.0, 1.0], [14100.0, 1.0], [15600.0, 1.0], [46100.0, 1.0], [47300.0, 1.0]], "isOverall": false, "label": "User Login", "isController": false}, {"data": [[600.0, 74.0], [700.0, 13.0], [800.0, 9.0], [900.0, 2.0], [1000.0, 1.0], [16700.0, 1.0], [1100.0, 1.0], [1200.0, 2.0], [1300.0, 2.0], [1400.0, 16.0], [1500.0, 12.0], [1700.0, 1.0], [2000.0, 1.0], [32600.0, 1.0], [2200.0, 1.0], [2300.0, 3.0], [2400.0, 3.0], [2500.0, 1.0], [2600.0, 1.0], [3300.0, 6.0], [4300.0, 3.0], [300.0, 2970.0], [6300.0, 2.0], [400.0, 180.0], [6900.0, 1.0], [500.0, 26.0]], "isOverall": false, "label": "Search Booking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 47300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 16.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 6283.0, "series": [{"data": [[0.0, 6283.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 304.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3396.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 16.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 19.818791946308725, "minX": 1.75717086E12, "maxY": 30.344827586206893, "series": [{"data": [[1.75717152E12, 20.785571142284564], [1.75717122E12, 21.466269841269813], [1.75717188E12, 21.284848484848485], [1.75717092E12, 22.51593625498007], [1.75717158E12, 21.539553752535493], [1.75717128E12, 21.335329341317337], [1.75717194E12, 21.443564356435658], [1.75717098E12, 22.425999999999988], [1.75717164E12, 21.740079365079367], [1.75717134E12, 22.478787878787887], [1.757172E12, 22.013972055888228], [1.75717104E12, 21.431411530815097], [1.7571717E12, 22.537373737373724], [1.7571714E12, 24.300601202404813], [1.75717206E12, 19.818791946308725], [1.7571711E12, 30.344827586206893], [1.75717176E12, 21.757874015748015], [1.75717146E12, 21.59486166007904], [1.75717116E12, 27.539473684210545], [1.75717182E12, 21.705410821643294], [1.75717086E12, 19.897959183673482]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75717206E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 363.0, "minX": 1.0, "maxY": 11549.666666666668, "series": [{"data": [[32.0, 832.4117647058823], [33.0, 807.6666666666665], [34.0, 1187.6000000000001], [35.0, 902.3913043478261], [36.0, 877.0999999999999], [37.0, 836.5], [38.0, 1126.8333333333335], [39.0, 1748.153846153846], [40.0, 639.0], [41.0, 1542.0], [43.0, 995.6], [44.0, 486.0], [4.0, 373.0], [6.0, 374.5], [7.0, 370.5], [8.0, 369.0], [10.0, 375.5], [12.0, 374.0], [13.0, 381.0], [14.0, 451.3333333333333], [15.0, 369.0], [16.0, 371.3636363636364], [17.0, 408.2666666666666], [18.0, 386.21296296296293], [19.0, 389.15648854961813], [20.0, 381.1973094170402], [21.0, 383.1398601398601], [22.0, 381.9183359013873], [23.0, 384.4627192982456], [24.0, 388.31353135313526], [25.0, 386.49673202614383], [26.0, 412.82258064516134], [27.0, 386.0333333333334], [28.0, 390.3636363636364], [29.0, 2304.25], [30.0, 881.7999999999998], [31.0, 498.2903225806452]], "isOverall": false, "label": "Create Booking", "isController": false}, {"data": [[22.45064506450643, 420.5688568856883]], "isOverall": false, "label": "Create Booking-Aggregated", "isController": false}, {"data": [[32.0, 4255.869565217391], [33.0, 4851.086956521738], [34.0, 10006.2], [35.0, 3938.4615384615386], [36.0, 5647.375], [37.0, 5255.999999999999], [38.0, 4785.38888888889], [39.0, 6024.777777777777], [41.0, 4459.666666666666], [40.0, 4810.333333333333], [42.0, 5361.5], [43.0, 6300.5], [44.0, 7270.5], [9.0, 2905.0], [10.0, 2150.5], [11.0, 2322.0], [12.0, 1861.0], [13.0, 1857.0], [14.0, 2271.5], [15.0, 1872.0], [16.0, 1888.5454545454543], [17.0, 1878.745762711864], [18.0, 1868.3382352941176], [19.0, 1884.420875420876], [20.0, 1895.571764705882], [21.0, 1887.6763202725717], [22.0, 1888.6311475409834], [23.0, 1909.2872340425545], [24.0, 2114.0174825174836], [25.0, 1904.1103448275858], [26.0, 1916.3636363636363], [27.0, 2040.7272727272727], [28.0, 2487.4444444444443], [29.0, 3842.846153846154], [30.0, 3681.4000000000005], [31.0, 3158.178571428571]], "isOverall": false, "label": "User Login", "isController": false}, {"data": [[22.352535253525343, 2103.8505850585075]], "isOverall": false, "label": "User Login-Aggregated", "isController": false}, {"data": [[32.0, 790.5555555555555], [33.0, 1175.625], [2.0, 375.0], [34.0, 859.3157894736843], [35.0, 644.1666666666666], [36.0, 627.272727272727], [37.0, 646.0833333333334], [38.0, 1035.3333333333335], [39.0, 2356.0], [41.0, 1011.2499999999999], [40.0, 989.8749999999999], [42.0, 497.5], [43.0, 11549.666666666668], [45.0, 1513.0], [44.0, 2365.0], [3.0, 372.0], [4.0, 376.0], [5.0, 373.0], [6.0, 394.0], [7.0, 380.0], [8.0, 375.0], [9.0, 380.0], [10.0, 365.0], [11.0, 383.0], [12.0, 368.0], [13.0, 363.0], [14.0, 373.0], [15.0, 375.0], [16.0, 409.8333333333333], [1.0, 376.0], [17.0, 386.36363636363643], [18.0, 376.82142857142867], [19.0, 383.2824074074077], [20.0, 381.0000000000001], [21.0, 380.94095940959426], [22.0, 383.4121405750802], [23.0, 386.795955882353], [24.0, 396.1764705882354], [25.0, 386.3882978723405], [26.0, 376.84999999999985], [27.0, 381.5294117647059], [28.0, 376.3333333333333], [29.0, 684.4545454545455], [30.0, 1836.6428571428569], [31.0, 1120.92]], "isOverall": false, "label": "Search Booking", "isController": false}, {"data": [[22.67446744674467, 433.8805880588059]], "isOverall": false, "label": "Search Booking-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 45.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 991.3833333333333, "minX": 1.75717086E12, "maxY": 7614.033333333334, "series": [{"data": [[1.75717152E12, 7137.466666666666], [1.75717122E12, 7205.783333333334], [1.75717188E12, 7088.35], [1.75717092E12, 7182.583333333333], [1.75717158E12, 7045.733333333334], [1.75717128E12, 7167.166666666667], [1.75717194E12, 7237.566666666667], [1.75717098E12, 7159.7], [1.75717164E12, 7219.416666666667], [1.75717134E12, 7087.7], [1.757172E12, 7252.083333333333], [1.75717104E12, 7204.9], [1.7571717E12, 7080.25], [1.7571714E12, 7123.666666666667], [1.75717206E12, 4266.15], [1.7571711E12, 6637.083333333333], [1.75717176E12, 7266.3], [1.75717146E12, 7237.816666666667], [1.75717116E12, 7614.033333333334], [1.75717182E12, 7135.483333333334], [1.75717086E12, 2794.5]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75717152E12, 2498.983333333333], [1.75717122E12, 2537.7833333333333], [1.75717188E12, 2482.366666666667], [1.75717092E12, 2520.883333333333], [1.75717158E12, 2484.266666666667], [1.75717128E12, 2507.383333333333], [1.75717194E12, 2540.35], [1.75717098E12, 2509.016666666667], [1.75717164E12, 2526.866666666667], [1.75717134E12, 2483.4333333333334], [1.757172E12, 2507.15], [1.75717104E12, 2526.4666666666667], [1.7571717E12, 2475.5666666666666], [1.7571714E12, 2504.6], [1.75717206E12, 1492.0833333333333], [1.7571711E12, 2326.866666666667], [1.75717176E12, 2551.45], [1.75717146E12, 2538.4666666666667], [1.75717116E12, 2664.5], [1.75717182E12, 2507.016666666667], [1.75717086E12, 991.3833333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75717206E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 373.8484848484848, "minX": 1.75717086E12, "maxY": 4026.9741935483867, "series": [{"data": [[1.75717152E12, 375.59999999999997], [1.75717122E12, 379.2117647058823], [1.75717188E12, 382.01219512195115], [1.75717092E12, 380.61676646706593], [1.75717158E12, 381.59281437125765], [1.75717128E12, 375.01818181818186], [1.75717194E12, 385.53216374269016], [1.75717098E12, 382.3293413173651], [1.75717164E12, 389.8511904761903], [1.75717134E12, 373.8484848484848], [1.757172E12, 490.5602409638555], [1.75717104E12, 388.6666666666665], [1.7571717E12, 398.12422360248456], [1.7571714E12, 416.4610778443114], [1.75717206E12, 415.3939393939394], [1.7571711E12, 814.7987012987012], [1.75717176E12, 386.8421052631578], [1.75717146E12, 379.0118343195267], [1.75717116E12, 572.2727272727269], [1.75717182E12, 377.3952095808385], [1.75717086E12, 388.1363636363637]], "isOverall": false, "label": "Create Booking", "isController": false}, {"data": [[1.75717152E12, 1859.240963855422], [1.75717122E12, 1870.2294117647064], [1.75717188E12, 1872.265060240963], [1.75717092E12, 1891.8402366863904], [1.75717158E12, 1873.6144578313258], [1.75717128E12, 1901.1796407185634], [1.75717194E12, 1882.660606060606], [1.75717098E12, 1885.3757575757577], [1.75717164E12, 1893.1212121212118], [1.75717134E12, 1878.3597560975609], [1.757172E12, 2037.2242424242431], [1.75717104E12, 1918.392857142857], [1.7571717E12, 1943.248520710059], [1.7571714E12, 2200.921686746987], [1.75717206E12, 1946.360824742268], [1.7571711E12, 4026.9741935483867], [1.75717176E12, 1908.6646706586837], [1.75717146E12, 1899.2189349112425], [1.75717116E12, 3579.068181818183], [1.75717182E12, 1903.700598802396], [1.75717086E12, 1854.4225352112671]], "isOverall": false, "label": "User Login", "isController": false}, {"data": [[1.75717152E12, 382.24404761904765], [1.75717122E12, 386.3536585365851], [1.75717188E12, 378.6303030303034], [1.75717092E12, 377.91566265060237], [1.75717158E12, 376.18750000000006], [1.75717128E12, 387.0473372781065], [1.75717194E12, 380.9053254437868], [1.75717098E12, 383.20833333333337], [1.75717164E12, 387.64327485380113], [1.75717134E12, 377.74698795180717], [1.757172E12, 520.3117647058824], [1.75717104E12, 395.1976047904191], [1.7571717E12, 392.00000000000006], [1.7571714E12, 503.34337349397583], [1.75717206E12, 396.56862745098033], [1.7571711E12, 728.5677419354835], [1.75717176E12, 377.6294117647061], [1.75717146E12, 382.0416666666668], [1.75717116E12, 780.6444444444442], [1.75717182E12, 377.5878787878789], [1.75717086E12, 385.23728813559325]], "isOverall": false, "label": "Search Booking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75717206E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 373.8060606060606, "minX": 1.75717086E12, "maxY": 4026.961290322581, "series": [{"data": [[1.75717152E12, 375.5878787878786], [1.75717122E12, 379.1882352941177], [1.75717188E12, 382.00609756097566], [1.75717092E12, 380.57485029940113], [1.75717158E12, 381.5868263473055], [1.75717128E12, 374.9939393939395], [1.75717194E12, 385.53216374269016], [1.75717098E12, 382.2754491017964], [1.75717164E12, 389.84523809523785], [1.75717134E12, 373.8060606060606], [1.757172E12, 490.5542168674699], [1.75717104E12, 388.6309523809525], [1.7571717E12, 398.12422360248456], [1.7571714E12, 416.43712574850315], [1.75717206E12, 415.3838383838385], [1.7571711E12, 814.779220779221], [1.75717176E12, 386.8245614035087], [1.75717146E12, 379.0], [1.75717116E12, 572.2500000000005], [1.75717182E12, 377.3952095808385], [1.75717086E12, 388.0757575757575]], "isOverall": false, "label": "Create Booking", "isController": false}, {"data": [[1.75717152E12, 1859.240963855422], [1.75717122E12, 1870.1882352941172], [1.75717188E12, 1872.2590361445775], [1.75717092E12, 1891.798816568047], [1.75717158E12, 1873.6144578313258], [1.75717128E12, 1901.1556886227552], [1.75717194E12, 1882.636363636364], [1.75717098E12, 1885.3212121212123], [1.75717164E12, 1893.1090909090908], [1.75717134E12, 1878.3414634146345], [1.757172E12, 2037.212121212121], [1.75717104E12, 1918.3750000000002], [1.7571717E12, 1943.2426035502958], [1.7571714E12, 2200.9156626506024], [1.75717206E12, 1946.360824742268], [1.7571711E12, 4026.961290322581], [1.75717176E12, 1908.6467065868258], [1.75717146E12, 1899.201183431953], [1.75717116E12, 3579.0397727272734], [1.75717182E12, 1903.700598802396], [1.75717086E12, 1854.3661971830982]], "isOverall": false, "label": "User Login", "isController": false}, {"data": [[1.75717152E12, 382.22619047619037], [1.75717122E12, 386.33536585365846], [1.75717188E12, 378.61212121212134], [1.75717092E12, 377.8855421686748], [1.75717158E12, 376.1812499999999], [1.75717128E12, 387.0295857988167], [1.75717194E12, 380.89940828402365], [1.75717098E12, 383.1726190476194], [1.75717164E12, 387.61988304093586], [1.75717134E12, 377.7168674698794], [1.757172E12, 520.3117647058824], [1.75717104E12, 395.1497005988025], [1.7571717E12, 391.99393939393934], [1.7571714E12, 503.3373493975907], [1.75717206E12, 396.55882352941165], [1.7571711E12, 728.5290322580645], [1.75717176E12, 377.61764705882365], [1.75717146E12, 382.0238095238095], [1.75717116E12, 780.6388888888882], [1.75717182E12, 377.5757575757574], [1.75717086E12, 385.1525423728813]], "isOverall": false, "label": "Search Booking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75717206E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.75717086E12, "maxY": 3230.8258064516126, "series": [{"data": [[1.75717152E12, 0.0], [1.75717122E12, 0.0], [1.75717188E12, 0.0], [1.75717092E12, 0.0], [1.75717158E12, 0.0], [1.75717128E12, 0.0], [1.75717194E12, 0.0], [1.75717098E12, 0.0], [1.75717164E12, 0.0], [1.75717134E12, 0.0], [1.757172E12, 0.0], [1.75717104E12, 0.0], [1.7571717E12, 0.0], [1.7571714E12, 0.0], [1.75717206E12, 0.0], [1.7571711E12, 0.0], [1.75717176E12, 0.0], [1.75717146E12, 0.0], [1.75717116E12, 0.0], [1.75717182E12, 0.0], [1.75717086E12, 0.0]], "isOverall": false, "label": "Create Booking", "isController": false}, {"data": [[1.75717152E12, 1481.030120481928], [1.75717122E12, 1497.8117647058818], [1.75717188E12, 1492.3132530120483], [1.75717092E12, 1512.7869822485204], [1.75717158E12, 1505.0000000000005], [1.75717128E12, 1518.59880239521], [1.75717194E12, 1505.1212121212122], [1.75717098E12, 1504.1454545454553], [1.75717164E12, 1514.4242424242425], [1.75717134E12, 1500.6890243902437], [1.757172E12, 1493.0363636363647], [1.75717104E12, 1540.9940476190475], [1.7571717E12, 1550.2544378698224], [1.7571714E12, 1582.0722891566263], [1.75717206E12, 1546.4948453608251], [1.7571711E12, 3230.8258064516126], [1.75717176E12, 1525.9161676646704], [1.75717146E12, 1520.017751479291], [1.75717116E12, 2967.3579545454545], [1.75717182E12, 1525.6946107784433], [1.75717086E12, 1483.478873239436]], "isOverall": false, "label": "User Login", "isController": false}, {"data": [[1.75717152E12, 0.0], [1.75717122E12, 0.0], [1.75717188E12, 0.0], [1.75717092E12, 0.0], [1.75717158E12, 0.0], [1.75717128E12, 0.0], [1.75717194E12, 0.0], [1.75717098E12, 0.0], [1.75717164E12, 0.0], [1.75717134E12, 0.0], [1.757172E12, 0.0], [1.75717104E12, 0.0], [1.7571717E12, 0.0], [1.7571714E12, 0.0], [1.75717206E12, 0.0], [1.7571711E12, 0.0], [1.75717176E12, 0.0], [1.75717146E12, 0.0], [1.75717116E12, 0.0], [1.75717182E12, 0.0], [1.75717086E12, 0.0]], "isOverall": false, "label": "Search Booking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75717206E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 353.0, "minX": 1.75717086E12, "maxY": 47372.0, "series": [{"data": [[1.75717152E12, 2496.0], [1.75717122E12, 2644.0], [1.75717188E12, 2640.0], [1.75717092E12, 4429.0], [1.75717158E12, 2535.0], [1.75717128E12, 3600.0], [1.75717194E12, 2549.0], [1.75717098E12, 2757.0], [1.75717164E12, 2969.0], [1.75717134E12, 2514.0], [1.757172E12, 5991.0], [1.75717104E12, 3289.0], [1.7571717E12, 3868.0], [1.7571714E12, 11045.0], [1.75717206E12, 3658.0], [1.7571711E12, 13829.0], [1.75717176E12, 2769.0], [1.75717146E12, 2698.0], [1.75717116E12, 47372.0], [1.75717182E12, 4463.0], [1.75717086E12, 2152.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75717152E12, 353.0], [1.75717122E12, 356.0], [1.75717188E12, 356.0], [1.75717092E12, 357.0], [1.75717158E12, 354.0], [1.75717128E12, 354.0], [1.75717194E12, 357.0], [1.75717098E12, 355.0], [1.75717164E12, 354.0], [1.75717134E12, 356.0], [1.757172E12, 355.0], [1.75717104E12, 355.0], [1.7571717E12, 356.0], [1.7571714E12, 358.0], [1.75717206E12, 359.0], [1.7571711E12, 356.0], [1.75717176E12, 357.0], [1.75717146E12, 356.0], [1.75717116E12, 357.0], [1.75717182E12, 355.0], [1.75717086E12, 358.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75717152E12, 1884.0], [1.75717122E12, 1895.5], [1.75717188E12, 1895.0], [1.75717092E12, 1889.7], [1.75717158E12, 1891.0], [1.75717128E12, 1895.4], [1.75717194E12, 1897.4], [1.75717098E12, 1903.7], [1.75717164E12, 1898.0], [1.75717134E12, 1896.6000000000001], [1.757172E12, 1917.5], [1.75717104E12, 1899.2], [1.7571717E12, 1930.4], [1.7571714E12, 1969.3999999999999], [1.75717206E12, 1940.0], [1.7571711E12, 4754.5], [1.75717176E12, 1914.4], [1.75717146E12, 1904.3], [1.75717116E12, 2942.899999999998], [1.75717182E12, 1889.0], [1.75717086E12, 1894.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75717152E12, 2146.0], [1.75717122E12, 2109.65], [1.75717188E12, 2188.880000000001], [1.75717092E12, 2228.2199999999993], [1.75717158E12, 2389.84], [1.75717128E12, 2521.460000000006], [1.75717194E12, 2152.34], [1.75717098E12, 2133.88], [1.75717164E12, 2507.799999999998], [1.75717134E12, 2179.9200000000005], [1.757172E12, 4865.49], [1.75717104E12, 2679.3199999999997], [1.7571717E12, 2721.6400000000012], [1.7571714E12, 5958.05], [1.75717206E12, 2571.129999999999], [1.7571711E12, 9822.60000000003], [1.75717176E12, 2446.6899999999982], [1.75717146E12, 2242.34], [1.75717116E12, 15155.719999999937], [1.75717182E12, 2502.0], [1.75717086E12, 2133.57]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75717152E12, 373.0], [1.75717122E12, 379.0], [1.75717188E12, 378.0], [1.75717092E12, 377.0], [1.75717158E12, 374.0], [1.75717128E12, 379.0], [1.75717194E12, 380.0], [1.75717098E12, 377.0], [1.75717164E12, 376.0], [1.75717134E12, 379.0], [1.757172E12, 380.0], [1.75717104E12, 381.0], [1.7571717E12, 381.0], [1.7571714E12, 382.0], [1.75717206E12, 379.0], [1.7571711E12, 541.0], [1.75717176E12, 377.5], [1.75717146E12, 379.0], [1.75717116E12, 455.5], [1.75717182E12, 375.0], [1.75717086E12, 378.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.75717152E12, 1950.0], [1.75717122E12, 1950.75], [1.75717188E12, 1951.1999999999998], [1.75717092E12, 1962.85], [1.75717158E12, 1930.0], [1.75717128E12, 1956.9], [1.75717194E12, 1947.8], [1.75717098E12, 1977.95], [1.75717164E12, 1951.75], [1.75717134E12, 1966.2], [1.757172E12, 2057.1], [1.75717104E12, 1959.8], [1.7571717E12, 2028.7999999999997], [1.7571714E12, 2214.749999999999], [1.75717206E12, 2162.5], [1.7571711E12, 6065.25], [1.75717176E12, 1994.7499999999998], [1.75717146E12, 1957.6], [1.75717116E12, 5745.099999999999], [1.75717182E12, 1950.0], [1.75717086E12, 1926.75]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75717206E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 376.0, "minX": 1.0, "maxY": 6370.0, "series": [{"data": [[2.0, 378.0], [8.0, 380.0], [9.0, 381.0], [10.0, 379.0], [11.0, 379.0], [3.0, 494.5], [12.0, 378.0], [13.0, 378.0], [14.0, 379.0], [15.0, 380.0], [1.0, 376.0], [4.0, 388.0], [16.0, 380.0], [17.0, 380.0], [5.0, 388.0], [20.0, 1107.5], [6.0, 380.0], [25.0, 3598.5], [7.0, 378.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 6370.0], [10.0, 4871.5], [20.0, 3370.5], [25.0, 3362.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 25.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 376.0, "minX": 1.0, "maxY": 6370.0, "series": [{"data": [[2.0, 378.0], [8.0, 380.0], [9.0, 381.0], [10.0, 379.0], [11.0, 379.0], [3.0, 494.5], [12.0, 378.0], [13.0, 378.0], [14.0, 379.0], [15.0, 380.0], [1.0, 376.0], [4.0, 388.0], [16.0, 380.0], [17.0, 380.0], [5.0, 388.0], [20.0, 1107.5], [6.0, 380.0], [25.0, 3598.5], [7.0, 378.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 6370.0], [10.0, 4871.5], [20.0, 3370.5], [25.0, 3362.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 25.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 3.4, "minX": 1.75717086E12, "maxY": 8.666666666666666, "series": [{"data": [[1.75717152E12, 8.316666666666666], [1.75717122E12, 8.333333333333334], [1.75717188E12, 8.266666666666667], [1.75717092E12, 8.383333333333333], [1.75717158E12, 8.3], [1.75717128E12, 8.4], [1.75717194E12, 8.45], [1.75717098E12, 8.333333333333334], [1.75717164E12, 8.35], [1.75717134E12, 8.283333333333333], [1.757172E12, 8.3], [1.75717104E12, 8.35], [1.7571717E12, 8.283333333333333], [1.7571714E12, 8.233333333333333], [1.75717206E12, 4.833333333333333], [1.7571711E12, 7.95], [1.75717176E12, 8.333333333333334], [1.75717146E12, 8.466666666666667], [1.75717116E12, 8.666666666666666], [1.75717182E12, 8.416666666666666], [1.75717086E12, 3.4]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75717206E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.75717086E12, "maxY": 8.866666666666667, "series": [{"data": [[1.75717152E12, 8.316666666666666], [1.75717122E12, 8.4], [1.75717188E12, 8.25], [1.75717092E12, 8.366666666666667], [1.75717158E12, 8.216666666666667], [1.75717128E12, 8.35], [1.75717194E12, 8.416666666666666], [1.75717098E12, 8.333333333333334], [1.75717164E12, 8.4], [1.75717134E12, 8.25], [1.757172E12, 8.2], [1.75717104E12, 8.383333333333333], [1.7571717E12, 8.25], [1.7571714E12, 8.2], [1.75717206E12, 4.966666666666667], [1.7571711E12, 7.733333333333333], [1.75717176E12, 8.466666666666667], [1.75717146E12, 8.433333333333334], [1.75717116E12, 8.866666666666667], [1.75717182E12, 8.316666666666666], [1.75717086E12, 3.2666666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.757172E12, 0.1], [1.7571714E12, 0.11666666666666667]], "isOverall": false, "label": "404", "isController": false}, {"data": [[1.757172E12, 0.05]], "isOverall": false, "label": "503", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75717206E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.75717086E12, "maxY": 3.0, "series": [{"data": [[1.75717152E12, 2.75], [1.75717122E12, 2.8333333333333335], [1.75717188E12, 2.7333333333333334], [1.75717092E12, 2.783333333333333], [1.75717158E12, 2.783333333333333], [1.75717128E12, 2.75], [1.75717194E12, 2.85], [1.75717098E12, 2.783333333333333], [1.75717164E12, 2.8], [1.75717134E12, 2.75], [1.757172E12, 2.7333333333333334], [1.75717104E12, 2.8], [1.7571717E12, 2.683333333333333], [1.7571714E12, 2.783333333333333], [1.75717206E12, 1.65], [1.7571711E12, 2.566666666666667], [1.75717176E12, 2.85], [1.75717146E12, 2.816666666666667], [1.75717116E12, 2.933333333333333], [1.75717182E12, 2.783333333333333], [1.75717086E12, 1.1]], "isOverall": false, "label": "Create Booking-success", "isController": false}, {"data": [[1.75717152E12, 2.7666666666666666], [1.75717122E12, 2.8333333333333335], [1.75717188E12, 2.7666666666666666], [1.75717092E12, 2.816666666666667], [1.75717158E12, 2.7666666666666666], [1.75717128E12, 2.783333333333333], [1.75717194E12, 2.75], [1.75717098E12, 2.75], [1.75717164E12, 2.75], [1.75717134E12, 2.7333333333333334], [1.757172E12, 2.7333333333333334], [1.75717104E12, 2.8], [1.7571717E12, 2.816666666666667], [1.7571714E12, 2.7666666666666666], [1.75717206E12, 1.6166666666666667], [1.7571711E12, 2.5833333333333335], [1.75717176E12, 2.783333333333333], [1.75717146E12, 2.816666666666667], [1.75717116E12, 2.933333333333333], [1.75717182E12, 2.783333333333333], [1.75717086E12, 1.1833333333333333]], "isOverall": false, "label": "User Login-success", "isController": false}, {"data": [[1.757172E12, 0.1], [1.7571714E12, 0.11666666666666667]], "isOverall": false, "label": "Search Booking-failure", "isController": false}, {"data": [[1.757172E12, 0.03333333333333333]], "isOverall": false, "label": "Create Booking-failure", "isController": false}, {"data": [[1.757172E12, 0.016666666666666666]], "isOverall": false, "label": "User Login-failure", "isController": false}, {"data": [[1.75717152E12, 2.8], [1.75717122E12, 2.7333333333333334], [1.75717188E12, 2.75], [1.75717092E12, 2.7666666666666666], [1.75717158E12, 2.6666666666666665], [1.75717128E12, 2.816666666666667], [1.75717194E12, 2.816666666666667], [1.75717098E12, 2.8], [1.75717164E12, 2.85], [1.75717134E12, 2.7666666666666666], [1.757172E12, 2.7333333333333334], [1.75717104E12, 2.783333333333333], [1.7571717E12, 2.75], [1.7571714E12, 2.65], [1.75717206E12, 1.7], [1.7571711E12, 2.5833333333333335], [1.75717176E12, 2.8333333333333335], [1.75717146E12, 2.8], [1.75717116E12, 3.0], [1.75717182E12, 2.75], [1.75717086E12, 0.9833333333333333]], "isOverall": false, "label": "Search Booking-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75717206E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.75717086E12, "maxY": 8.866666666666667, "series": [{"data": [[1.75717152E12, 8.316666666666666], [1.75717122E12, 8.4], [1.75717188E12, 8.25], [1.75717092E12, 8.366666666666667], [1.75717158E12, 8.216666666666667], [1.75717128E12, 8.35], [1.75717194E12, 8.416666666666666], [1.75717098E12, 8.333333333333334], [1.75717164E12, 8.4], [1.75717134E12, 8.25], [1.757172E12, 8.2], [1.75717104E12, 8.383333333333333], [1.7571717E12, 8.25], [1.7571714E12, 8.2], [1.75717206E12, 4.966666666666667], [1.7571711E12, 7.733333333333333], [1.75717176E12, 8.466666666666667], [1.75717146E12, 8.433333333333334], [1.75717116E12, 8.866666666666667], [1.75717182E12, 8.316666666666666], [1.75717086E12, 3.2666666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.757172E12, 0.15], [1.7571714E12, 0.11666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75717206E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

